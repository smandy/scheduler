// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `gem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____gem_h__
#define ____gem_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Gem
{

class GemServerListener;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Gem::GemServerListener>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Gem::GemServerListener*);

class GemServer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Gem::GemServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Gem::GemServer*);

}

}

namespace Gem
{

class GemServerListener;
bool operator==(const GemServerListener&, const GemServerListener&);
bool operator<(const GemServerListener&, const GemServerListener&);
::Ice::Object* upCast(::Gem::GemServerListener*);
typedef ::IceInternal::Handle< ::Gem::GemServerListener> GemServerListenerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Gem::GemServerListener> GemServerListenerPrx;
void __patch(GemServerListenerPtr&, const ::Ice::ObjectPtr&);

class GemServer;
bool operator==(const GemServer&, const GemServer&);
bool operator<(const GemServer&, const GemServer&);
::Ice::Object* upCast(::Gem::GemServer*);
typedef ::IceInternal::Handle< ::Gem::GemServer> GemServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Gem::GemServer> GemServerPrx;
void __patch(GemServerPtr&, const ::Ice::ObjectPtr&);

}

namespace Gem
{

typedef ::std::vector< ::std::string> StringSeq;

typedef ::std::map< ::std::string, ::std::string> StringStringDict;

enum JobState
{
    BLOCKED,
    STARTABLE,
    SCHEDULED,
    STARTED,
    STOPPED,
    FAILED,
    WAIVERED,
    COMPLETED
};

struct JobUpdate
{
    ::std::string id;
    ::Ice::Int pctComplete;
    ::std::string status;

    bool operator==(const JobUpdate& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(pctComplete != __rhs.pctComplete)
        {
            return false;
        }
        if(status != __rhs.status)
        {
            return false;
        }
        return true;
    }

    bool operator<(const JobUpdate& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(pctComplete < __rhs.pctComplete)
        {
            return true;
        }
        else if(__rhs.pctComplete < pctComplete)
        {
            return false;
        }
        if(status < __rhs.status)
        {
            return true;
        }
        else if(__rhs.status < status)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const JobUpdate& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const JobUpdate& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const JobUpdate& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const JobUpdate& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Gem::JobUpdate> JobUpdateSeq;

struct WorkerId
{
    ::std::string id;

    bool operator==(const WorkerId& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WorkerId& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WorkerId& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const WorkerId& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const WorkerId& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const WorkerId& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct JobWorkerState
{
    ::Gem::WorkerId worker;
    ::std::string id;
    ::Gem::JobState state;

    bool operator==(const JobWorkerState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(worker != __rhs.worker)
        {
            return false;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const JobWorkerState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(worker < __rhs.worker)
        {
            return true;
        }
        else if(__rhs.worker < worker)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const JobWorkerState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const JobWorkerState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const JobWorkerState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const JobWorkerState& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Gem::JobWorkerState> JobWorkerStateSeq;

struct Job
{
    Job() :
        state(STARTABLE)
    {
    }
    
    Job(const ::std::string& __ice_id, const ::Gem::StringSeq& __ice_dependencies, ::Gem::JobState __ice_state, ::Ice::Int __ice_priority, const ::std::string& __ice_pwd, const ::Gem::StringSeq& __ice_cmdLine, const ::Gem::StringStringDict& __ice_env, const ::std::string& __ice_batchId) :
        id(__ice_id),
        dependencies(__ice_dependencies),
        state(__ice_state),
        priority(__ice_priority),
        pwd(__ice_pwd),
        cmdLine(__ice_cmdLine),
        env(__ice_env),
        batchId(__ice_batchId)
    {
    }
    

    ::std::string id;
    ::Gem::StringSeq dependencies;
    ::Gem::JobState state;
    ::Ice::Int priority;
    ::std::string pwd;
    ::Gem::StringSeq cmdLine;
    ::Gem::StringStringDict env;
    ::std::string batchId;
};

typedef ::std::vector< ::Gem::Job> JobSeq;

typedef ::std::map< ::std::string, ::Gem::Job> JobDict;

struct Batch
{
    ::Gem::JobSeq jobs;
};

struct Image
{
    ::Gem::JobSeq jobs;
    ::std::string currentImage;
};

class JobNotFound : public ::Ice::UserException
{
public:

    JobNotFound() {}
    explicit JobNotFound(const ::std::string&);
    virtual ~JobNotFound() throw();

    virtual ::std::string ice_name() const;
    virtual JobNotFound* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string id;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static JobNotFound __JobNotFound_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Gem::JobState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 7;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Gem::JobUpdate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Gem::JobUpdate, S>
{
    static void write(S* __os, const ::Gem::JobUpdate& v)
    {
        __os->write(v.id);
        __os->write(v.pctComplete);
        __os->write(v.status);
    }
};

template<class S>
struct StreamReader< ::Gem::JobUpdate, S>
{
    static void read(S* __is, ::Gem::JobUpdate& v)
    {
        __is->read(v.id);
        __is->read(v.pctComplete);
        __is->read(v.status);
    }
};

template<>
struct StreamableTraits< ::Gem::WorkerId>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Gem::WorkerId, S>
{
    static void write(S* __os, const ::Gem::WorkerId& v)
    {
        __os->write(v.id);
    }
};

template<class S>
struct StreamReader< ::Gem::WorkerId, S>
{
    static void read(S* __is, ::Gem::WorkerId& v)
    {
        __is->read(v.id);
    }
};

template<>
struct StreamableTraits< ::Gem::JobWorkerState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Gem::JobWorkerState, S>
{
    static void write(S* __os, const ::Gem::JobWorkerState& v)
    {
        __os->write(v.worker);
        __os->write(v.id);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::Gem::JobWorkerState, S>
{
    static void read(S* __is, ::Gem::JobWorkerState& v)
    {
        __is->read(v.worker);
        __is->read(v.id);
        __is->read(v.state);
    }
};

template<>
struct StreamableTraits< ::Gem::Job>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Gem::Job, S>
{
    static void write(S* __os, const ::Gem::Job& v)
    {
        __os->write(v.id);
        __os->write(v.dependencies);
        __os->write(v.state);
        __os->write(v.priority);
        __os->write(v.pwd);
        __os->write(v.cmdLine);
        __os->write(v.env);
        __os->write(v.batchId);
    }
};

template<class S>
struct StreamReader< ::Gem::Job, S>
{
    static void read(S* __is, ::Gem::Job& v)
    {
        __is->read(v.id);
        __is->read(v.dependencies);
        __is->read(v.state);
        __is->read(v.priority);
        __is->read(v.pwd);
        __is->read(v.cmdLine);
        __is->read(v.env);
        __is->read(v.batchId);
    }
};

template<>
struct StreamableTraits< ::Gem::Batch>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Gem::Batch, S>
{
    static void write(S* __os, const ::Gem::Batch& v)
    {
        __os->write(v.jobs);
    }
};

template<class S>
struct StreamReader< ::Gem::Batch, S>
{
    static void read(S* __is, ::Gem::Batch& v)
    {
        __is->read(v.jobs);
    }
};

template<>
struct StreamableTraits< ::Gem::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Gem::Image, S>
{
    static void write(S* __os, const ::Gem::Image& v)
    {
        __os->write(v.jobs);
        __os->write(v.currentImage);
    }
};

template<class S>
struct StreamReader< ::Gem::Image, S>
{
    static void read(S* __is, ::Gem::Image& v)
    {
        __is->read(v.jobs);
        __is->read(v.currentImage);
    }
};

template<>
struct StreamableTraits< ::Gem::JobNotFound>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Gem
{

class AMD_GemServerListener_onImage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServerListener_onImage> AMD_GemServerListener_onImagePtr;

class AMD_GemServerListener_onUpdate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServerListener_onUpdate> AMD_GemServerListener_onUpdatePtr;

class AMD_GemServerListener_onImageReady : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServerListener_onImageReady> AMD_GemServerListener_onImageReadyPtr;

class AMD_GemServerListener_onReset : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServerListener_onReset> AMD_GemServerListener_onResetPtr;

class AMD_GemServer_submitBatch : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_submitBatch> AMD_GemServer_submitBatchPtr;

class AMD_GemServer_startJob : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_startJob> AMD_GemServer_startJobPtr;

class AMD_GemServer_stopJob : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_stopJob> AMD_GemServer_stopJobPtr;

class AMD_GemServer_invalidate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_invalidate> AMD_GemServer_invalidatePtr;

class AMD_GemServer_reset : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_reset> AMD_GemServer_resetPtr;

class AMD_GemServer_dumpStatus : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_dumpStatus> AMD_GemServer_dumpStatusPtr;

class AMD_GemServer_getJobs : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Gem::JobSeq&) = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_getJobs> AMD_GemServer_getJobsPtr;

class AMD_GemServer_getStartableJob : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Gem::JobSeq&) = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_getStartableJob> AMD_GemServer_getStartableJobPtr;

class AMD_GemServer_getJob : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Gem::Job&) = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_getJob> AMD_GemServer_getJobPtr;

class AMD_GemServer_addListener : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_addListener> AMD_GemServer_addListenerPtr;

class AMD_GemServer_addListenerWithIdent : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_addListenerWithIdent> AMD_GemServer_addListenerWithIdentPtr;

class AMD_GemServer_onWorkerStates : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_onWorkerStates> AMD_GemServer_onWorkerStatesPtr;

class AMD_GemServer_imageReady : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Gem::AMD_GemServer_imageReady> AMD_GemServer_imageReadyPtr;

}

namespace IceAsync
{

namespace Gem
{

class AMD_GemServerListener_onImage : public ::Gem::AMD_GemServerListener_onImage, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServerListener_onImage(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServerListener_onUpdate : public ::Gem::AMD_GemServerListener_onUpdate, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServerListener_onUpdate(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServerListener_onImageReady : public ::Gem::AMD_GemServerListener_onImageReady, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServerListener_onImageReady(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServerListener_onReset : public ::Gem::AMD_GemServerListener_onReset, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServerListener_onReset(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_submitBatch : public ::Gem::AMD_GemServer_submitBatch, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_submitBatch(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_startJob : public ::Gem::AMD_GemServer_startJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_startJob(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_stopJob : public ::Gem::AMD_GemServer_stopJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_stopJob(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_invalidate : public ::Gem::AMD_GemServer_invalidate, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_invalidate(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_reset : public ::Gem::AMD_GemServer_reset, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_reset(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_dumpStatus : public ::Gem::AMD_GemServer_dumpStatus, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_dumpStatus(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
};

class AMD_GemServer_getJobs : public ::Gem::AMD_GemServer_getJobs, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_getJobs(::IceInternal::Incoming&);

    virtual void ice_response(const ::Gem::JobSeq&);
};

class AMD_GemServer_getStartableJob : public ::Gem::AMD_GemServer_getStartableJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_getStartableJob(::IceInternal::Incoming&);

    virtual void ice_response(const ::Gem::JobSeq&);
};

class AMD_GemServer_getJob : public ::Gem::AMD_GemServer_getJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_getJob(::IceInternal::Incoming&);

    virtual void ice_response(const ::Gem::Job&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_GemServer_addListener : public ::Gem::AMD_GemServer_addListener, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_addListener(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_addListenerWithIdent : public ::Gem::AMD_GemServer_addListenerWithIdent, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_addListenerWithIdent(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_onWorkerStates : public ::Gem::AMD_GemServer_onWorkerStates, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_onWorkerStates(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_GemServer_imageReady : public ::Gem::AMD_GemServer_imageReady, public ::IceInternal::IncomingAsync
{
public:

    AMD_GemServer_imageReady(::IceInternal::Incoming&);

    virtual void ice_response();
};

}

}

namespace Gem
{

class Callback_GemServerListener_onImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServerListener_onImage_Base> Callback_GemServerListener_onImagePtr;

class Callback_GemServerListener_onUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServerListener_onUpdate_Base> Callback_GemServerListener_onUpdatePtr;

class Callback_GemServerListener_onImageReady_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServerListener_onImageReady_Base> Callback_GemServerListener_onImageReadyPtr;

class Callback_GemServerListener_onReset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServerListener_onReset_Base> Callback_GemServerListener_onResetPtr;

class Callback_GemServer_submitBatch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_submitBatch_Base> Callback_GemServer_submitBatchPtr;

class Callback_GemServer_startJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_startJob_Base> Callback_GemServer_startJobPtr;

class Callback_GemServer_stopJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_stopJob_Base> Callback_GemServer_stopJobPtr;

class Callback_GemServer_invalidate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_invalidate_Base> Callback_GemServer_invalidatePtr;

class Callback_GemServer_reset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_reset_Base> Callback_GemServer_resetPtr;

class Callback_GemServer_dumpStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_dumpStatus_Base> Callback_GemServer_dumpStatusPtr;

class Callback_GemServer_getJobs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_getJobs_Base> Callback_GemServer_getJobsPtr;

class Callback_GemServer_getStartableJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_getStartableJob_Base> Callback_GemServer_getStartableJobPtr;

class Callback_GemServer_getJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_getJob_Base> Callback_GemServer_getJobPtr;

class Callback_GemServer_addListener_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_addListener_Base> Callback_GemServer_addListenerPtr;

class Callback_GemServer_addListenerWithIdent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_addListenerWithIdent_Base> Callback_GemServer_addListenerWithIdentPtr;

class Callback_GemServer_onWorkerStates_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_onWorkerStates_Base> Callback_GemServer_onWorkerStatesPtr;

class Callback_GemServer_imageReady_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GemServer_imageReady_Base> Callback_GemServer_imageReadyPtr;

}

namespace IceProxy
{

namespace Gem
{

class GemServerListener : virtual public ::IceProxy::Ice::Object
{
public:

    void onImage(const ::Gem::Image& __p_image)
    {
        onImage(__p_image, 0);
    }
    void onImage(const ::Gem::Image& __p_image, const ::Ice::Context& __ctx)
    {
        onImage(__p_image, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onImage(const ::Gem::Image& __p_image, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onImage(__p_image, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::Gem::Image& __p_image, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onImage(__p_image, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::Gem::Image& __p_image, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onImage(__p_image, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::Gem::Image& __p_image, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onImage(__p_image, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onImage(const ::Gem::Image& __p_image)
    {
        return begin_onImage(__p_image, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::Gem::Image& __p_image, const ::Ice::Context& __ctx)
    {
        return begin_onImage(__p_image, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::Gem::Image& __p_image, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_image, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::Gem::Image& __p_image, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_image, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::Gem::Image& __p_image, const ::Gem::Callback_GemServerListener_onImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_image, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::Gem::Image& __p_image, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServerListener_onImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_image, &__ctx, __del, __cookie);
    }

    void end_onImage(const ::Ice::AsyncResultPtr&);
    
private:

    void onImage(const ::Gem::Image&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onImage(const ::Gem::Image&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void onUpdate(const ::Gem::JobSeq& __p_jobs)
    {
        onUpdate(__p_jobs, 0);
    }
    void onUpdate(const ::Gem::JobSeq& __p_jobs, const ::Ice::Context& __ctx)
    {
        onUpdate(__p_jobs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onUpdate(__p_jobs, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onUpdate(__p_jobs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onUpdate(__p_jobs, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onUpdate(__p_jobs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onUpdate(const ::Gem::JobSeq& __p_jobs)
    {
        return begin_onUpdate(__p_jobs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::Ice::Context& __ctx)
    {
        return begin_onUpdate(__p_jobs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onUpdate(__p_jobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onUpdate(__p_jobs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::Gem::Callback_GemServerListener_onUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onUpdate(__p_jobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::Gem::JobSeq& __p_jobs, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServerListener_onUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onUpdate(__p_jobs, &__ctx, __del, __cookie);
    }

    void end_onUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    void onUpdate(const ::Gem::JobSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onUpdate(const ::Gem::JobSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void onImageReady(const ::std::string& __p_imgId)
    {
        onImageReady(__p_imgId, 0);
    }
    void onImageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx)
    {
        onImageReady(__p_imgId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onImageReady(const ::std::string& __p_imgId, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onImageReady(__p_imgId, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onImageReady(const ::std::string& __p_imgId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onImageReady(__p_imgId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onImageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onImageReady(__p_imgId, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onImageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onImageReady(__p_imgId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& __p_imgId)
    {
        return begin_onImageReady(__p_imgId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx)
    {
        return begin_onImageReady(__p_imgId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& __p_imgId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImageReady(__p_imgId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImageReady(__p_imgId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& __p_imgId, const ::Gem::Callback_GemServerListener_onImageReadyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImageReady(__p_imgId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServerListener_onImageReadyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImageReady(__p_imgId, &__ctx, __del, __cookie);
    }

    void end_onImageReady(const ::Ice::AsyncResultPtr&);
    
private:

    void onImageReady(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void onReset()
    {
        onReset(0);
    }
    void onReset(const ::Ice::Context& __ctx)
    {
        onReset(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onReset(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onReset(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onReset(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onReset(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onReset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onReset(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onReset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onReset(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onReset()
    {
        return begin_onReset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::Context& __ctx)
    {
        return begin_onReset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onReset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onReset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Gem::Callback_GemServerListener_onResetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onReset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::Context& __ctx, const ::Gem::Callback_GemServerListener_onResetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onReset(&__ctx, __del, __cookie);
    }

    void end_onReset(const ::Ice::AsyncResultPtr&);
    
private:

    void onReset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_secure(bool __secure) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_twoway() const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_oneway() const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_batchOneway() const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_datagram() const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_batchDatagram() const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_compress(bool __compress) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_timeout(int __timeout) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GemServerListener> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<GemServerListener*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class GemServer : virtual public ::IceProxy::Ice::Object
{
public:

    void submitBatch(const ::Gem::Batch& __p_batch)
    {
        submitBatch(__p_batch, 0);
    }
    void submitBatch(const ::Gem::Batch& __p_batch, const ::Ice::Context& __ctx)
    {
        submitBatch(__p_batch, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_submitBatch(const ::Gem::Batch& __p_batch, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_submitBatch(__p_batch, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_submitBatch(const ::Gem::Batch& __p_batch, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitBatch(__p_batch, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_submitBatch(const ::Gem::Batch& __p_batch, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_submitBatch(__p_batch, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_submitBatch(const ::Gem::Batch& __p_batch, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submitBatch(__p_batch, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_submitBatch(const ::Gem::Batch& __p_batch)
    {
        return begin_submitBatch(__p_batch, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::Gem::Batch& __p_batch, const ::Ice::Context& __ctx)
    {
        return begin_submitBatch(__p_batch, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::Gem::Batch& __p_batch, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitBatch(__p_batch, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::Gem::Batch& __p_batch, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitBatch(__p_batch, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::Gem::Batch& __p_batch, const ::Gem::Callback_GemServer_submitBatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitBatch(__p_batch, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::Gem::Batch& __p_batch, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_submitBatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submitBatch(__p_batch, &__ctx, __del, __cookie);
    }

    void end_submitBatch(const ::Ice::AsyncResultPtr&);
    
private:

    void submitBatch(const ::Gem::Batch&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_submitBatch(const ::Gem::Batch&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void startJob(const ::std::string& __p_id)
    {
        startJob(__p_id, 0);
    }
    void startJob(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        startJob(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_startJob(const ::std::string& __p_id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_startJob(__p_id, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_startJob(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startJob(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_startJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_startJob(__p_id, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_startJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startJob(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_startJob(const ::std::string& __p_id)
    {
        return begin_startJob(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_startJob(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startJob(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startJob(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::std::string& __p_id, const ::Gem::Callback_GemServer_startJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startJob(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_startJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startJob(__p_id, &__ctx, __del, __cookie);
    }

    void end_startJob(const ::Ice::AsyncResultPtr&);
    
private:

    void startJob(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_startJob(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopJob(const ::std::string& __p_id)
    {
        stopJob(__p_id, 0);
    }
    void stopJob(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        stopJob(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopJob(const ::std::string& __p_id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopJob(__p_id, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_stopJob(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopJob(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopJob(__p_id, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopJob(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_stopJob(const ::std::string& __p_id)
    {
        return begin_stopJob(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_stopJob(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopJob(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopJob(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::std::string& __p_id, const ::Gem::Callback_GemServer_stopJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopJob(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_stopJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopJob(__p_id, &__ctx, __del, __cookie);
    }

    void end_stopJob(const ::Ice::AsyncResultPtr&);
    
private:

    void stopJob(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopJob(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void invalidate(const ::std::string& __p_id)
    {
        invalidate(__p_id, 0);
    }
    void invalidate(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        invalidate(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_invalidate(const ::std::string& __p_id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_invalidate(__p_id, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_invalidate(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invalidate(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invalidate(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_invalidate(__p_id, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invalidate(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invalidate(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_invalidate(const ::std::string& __p_id)
    {
        return begin_invalidate(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invalidate(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_invalidate(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invalidate(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invalidate(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidate(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invalidate(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidate(const ::std::string& __p_id, const ::Gem::Callback_GemServer_invalidatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invalidate(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidate(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_invalidatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invalidate(__p_id, &__ctx, __del, __cookie);
    }

    void end_invalidate(const ::Ice::AsyncResultPtr&);
    
private:

    void invalidate(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_invalidate(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reset()
    {
        reset(0);
    }
    void reset(const ::Ice::Context& __ctx)
    {
        reset(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reset(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reset(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reset(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reset(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reset(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reset()
    {
        return begin_reset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx)
    {
        return begin_reset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Gem::Callback_GemServer_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr&);
    
private:

    void reset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string dumpStatus()
    {
        return dumpStatus(0);
    }
    ::std::string dumpStatus(const ::Ice::Context& __ctx)
    {
        return dumpStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_dumpStatus(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_dumpStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_dumpStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_dumpStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_dumpStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_dumpStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_dumpStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_dumpStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_dumpStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_dumpStatus()
    {
        return begin_dumpStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::Context& __ctx)
    {
        return begin_dumpStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_dumpStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_dumpStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Gem::Callback_GemServer_dumpStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_dumpStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_dumpStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_dumpStatus(&__ctx, __del, __cookie);
    }

    ::std::string end_dumpStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string dumpStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Gem::JobSeq getJobs()
    {
        return getJobs(0);
    }
    ::Gem::JobSeq getJobs(const ::Ice::Context& __ctx)
    {
        return getJobs(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getJobs(const ::IceInternal::Function<void (const ::Gem::JobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJobs(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJobs(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJobs(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getJobs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Gem::JobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJobs(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJobs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJobs(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getJobs(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Gem::JobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getJobs()
    {
        return begin_getJobs(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::Context& __ctx)
    {
        return begin_getJobs(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJobs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJobs(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Gem::Callback_GemServer_getJobsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJobs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_getJobsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJobs(&__ctx, __del, __cookie);
    }

    ::Gem::JobSeq end_getJobs(const ::Ice::AsyncResultPtr&);
    
private:

    ::Gem::JobSeq getJobs(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Gem::JobSeq getStartableJob(const ::Gem::WorkerId& __p_worker)
    {
        return getStartableJob(__p_worker, 0);
    }
    ::Gem::JobSeq getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Ice::Context& __ctx)
    {
        return getStartableJob(__p_worker, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::IceInternal::Function<void (const ::Gem::JobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStartableJob(__p_worker, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStartableJob(__p_worker, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Gem::JobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStartableJob(__p_worker, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStartableJob(__p_worker, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Gem::JobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::Gem::WorkerId& __p_worker)
    {
        return begin_getStartableJob(__p_worker, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Ice::Context& __ctx)
    {
        return begin_getStartableJob(__p_worker, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStartableJob(__p_worker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStartableJob(__p_worker, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Gem::Callback_GemServer_getStartableJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStartableJob(__p_worker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::Gem::WorkerId& __p_worker, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_getStartableJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStartableJob(__p_worker, &__ctx, __del, __cookie);
    }

    ::Gem::JobSeq end_getStartableJob(const ::Ice::AsyncResultPtr&);
    
private:

    ::Gem::JobSeq getStartableJob(const ::Gem::WorkerId&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStartableJob(const ::Gem::WorkerId&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Gem::Job getJob(const ::std::string& __p_id)
    {
        return getJob(__p_id, 0);
    }
    ::Gem::Job getJob(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return getJob(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getJob(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Gem::Job&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJob(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJob(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJob(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Gem::Job&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJob(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJob(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getJob(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Gem::Job&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getJob(const ::std::string& __p_id)
    {
        return begin_getJob(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_getJob(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJob(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJob(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::std::string& __p_id, const ::Gem::Callback_GemServer_getJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJob(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_getJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJob(__p_id, &__ctx, __del, __cookie);
    }

    ::Gem::Job end_getJob(const ::Ice::AsyncResultPtr&);
    
private:

    ::Gem::Job getJob(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getJob(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addListener(const ::Gem::GemServerListenerPrx& __p_listener)
    {
        addListener(__p_listener, 0);
    }
    void addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::Ice::Context& __ctx)
    {
        addListener(__p_listener, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addListener(__p_listener, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addListener(__p_listener, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addListener(__p_listener, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addListener(__p_listener, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener)
    {
        return begin_addListener(__p_listener, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::Ice::Context& __ctx)
    {
        return begin_addListener(__p_listener, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListener(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListener(__p_listener, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::Gem::Callback_GemServer_addListenerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListener(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::Gem::GemServerListenerPrx& __p_listener, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_addListenerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListener(__p_listener, &__ctx, __del, __cookie);
    }

    void end_addListener(const ::Ice::AsyncResultPtr&);
    
private:

    void addListener(const ::Gem::GemServerListenerPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addListener(const ::Gem::GemServerListenerPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addListenerWithIdent(const ::Ice::Identity& __p_ident)
    {
        addListenerWithIdent(__p_ident, 0);
    }
    void addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx)
    {
        addListenerWithIdent(__p_ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addListenerWithIdent(__p_ident, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addListenerWithIdent(__p_ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addListenerWithIdent(__p_ident, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addListenerWithIdent(__p_ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& __p_ident)
    {
        return begin_addListenerWithIdent(__p_ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx)
    {
        return begin_addListenerWithIdent(__p_ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListenerWithIdent(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListenerWithIdent(__p_ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Gem::Callback_GemServer_addListenerWithIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListenerWithIdent(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_addListenerWithIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListenerWithIdent(__p_ident, &__ctx, __del, __cookie);
    }

    void end_addListenerWithIdent(const ::Ice::AsyncResultPtr&);
    
private:

    void addListenerWithIdent(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs)
    {
        onWorkerStates(__p_xs, 0);
    }
    void onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::Ice::Context& __ctx)
    {
        onWorkerStates(__p_xs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onWorkerStates(__p_xs, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onWorkerStates(__p_xs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onWorkerStates(__p_xs, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onWorkerStates(__p_xs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs)
    {
        return begin_onWorkerStates(__p_xs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::Ice::Context& __ctx)
    {
        return begin_onWorkerStates(__p_xs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onWorkerStates(__p_xs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onWorkerStates(__p_xs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::Gem::Callback_GemServer_onWorkerStatesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onWorkerStates(__p_xs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onWorkerStates(const ::Gem::JobWorkerStateSeq& __p_xs, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_onWorkerStatesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onWorkerStates(__p_xs, &__ctx, __del, __cookie);
    }

    void end_onWorkerStates(const ::Ice::AsyncResultPtr&);
    
private:

    void onWorkerStates(const ::Gem::JobWorkerStateSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onWorkerStates(const ::Gem::JobWorkerStateSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void imageReady(const ::std::string& __p_imgId)
    {
        imageReady(__p_imgId, 0);
    }
    void imageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx)
    {
        imageReady(__p_imgId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_imageReady(const ::std::string& __p_imgId, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_imageReady(__p_imgId, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_imageReady(const ::std::string& __p_imgId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_imageReady(__p_imgId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_imageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_imageReady(__p_imgId, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_imageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_imageReady(__p_imgId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& __p_imgId)
    {
        return begin_imageReady(__p_imgId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx)
    {
        return begin_imageReady(__p_imgId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& __p_imgId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imageReady(__p_imgId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imageReady(__p_imgId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& __p_imgId, const ::Gem::Callback_GemServer_imageReadyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imageReady(__p_imgId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& __p_imgId, const ::Ice::Context& __ctx, const ::Gem::Callback_GemServer_imageReadyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imageReady(__p_imgId, &__ctx, __del, __cookie);
    }

    void end_imageReady(const ::Ice::AsyncResultPtr&);
    
private:

    void imageReady(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<GemServer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_secure(bool __secure) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_twoway() const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_oneway() const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_batchOneway() const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_datagram() const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_batchDatagram() const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_compress(bool __compress) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GemServer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<GemServer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Gem
{

class GemServerListener : virtual public ::Ice::Object
{
public:

    typedef GemServerListenerPrx ProxyType;
    typedef GemServerListenerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void onImage_async(const ::Gem::AMD_GemServerListener_onImagePtr&, const ::Gem::Image&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onUpdate_async(const ::Gem::AMD_GemServerListener_onUpdatePtr&, const ::Gem::JobSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onImageReady_async(const ::Gem::AMD_GemServerListener_onImageReadyPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onImageReady(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onReset_async(const ::Gem::AMD_GemServerListener_onResetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onReset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const GemServerListener& l, const GemServerListener& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GemServerListener& l, const GemServerListener& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GemServer : virtual public ::Ice::Object
{
public:

    typedef GemServerPrx ProxyType;
    typedef GemServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void submitBatch_async(const ::Gem::AMD_GemServer_submitBatchPtr&, const ::Gem::Batch&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___submitBatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void startJob_async(const ::Gem::AMD_GemServer_startJobPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___startJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopJob_async(const ::Gem::AMD_GemServer_stopJobPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void invalidate_async(const ::Gem::AMD_GemServer_invalidatePtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___invalidate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reset_async(const ::Gem::AMD_GemServer_resetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void dumpStatus_async(const ::Gem::AMD_GemServer_dumpStatusPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___dumpStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getJobs_async(const ::Gem::AMD_GemServer_getJobsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getJobs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getStartableJob_async(const ::Gem::AMD_GemServer_getStartableJobPtr&, const ::Gem::WorkerId&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStartableJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getJob_async(const ::Gem::AMD_GemServer_getJobPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addListener_async(const ::Gem::AMD_GemServer_addListenerPtr&, const ::Gem::GemServerListenerPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addListener(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addListenerWithIdent_async(const ::Gem::AMD_GemServer_addListenerWithIdentPtr&, const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addListenerWithIdent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onWorkerStates_async(const ::Gem::AMD_GemServer_onWorkerStatesPtr&, const ::Gem::JobWorkerStateSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onWorkerStates(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void imageReady_async(const ::Gem::AMD_GemServer_imageReadyPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___imageReady(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const GemServer& l, const GemServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GemServer& l, const GemServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Gem
{

template<class T>
class CallbackNC_GemServerListener_onImage : public Callback_GemServerListener_onImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServerListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServerListener_onImagePtr
newCallback_GemServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServerListener_onImagePtr
newCallback_GemServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServerListener_onImagePtr
newCallback_GemServerListener_onImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServerListener_onImagePtr
newCallback_GemServerListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServerListener_onImage : public Callback_GemServerListener_onImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServerListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServerListener_onImagePtr
newCallback_GemServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onImagePtr
newCallback_GemServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onImagePtr
newCallback_GemServerListener_onImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onImagePtr
newCallback_GemServerListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServerListener_onUpdate : public Callback_GemServerListener_onUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServerListener_onUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServerListener_onUpdatePtr
newCallback_GemServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServerListener_onUpdatePtr
newCallback_GemServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServerListener_onUpdatePtr
newCallback_GemServerListener_onUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServerListener_onUpdatePtr
newCallback_GemServerListener_onUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServerListener_onUpdate : public Callback_GemServerListener_onUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServerListener_onUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServerListener_onUpdatePtr
newCallback_GemServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onUpdatePtr
newCallback_GemServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onUpdatePtr
newCallback_GemServerListener_onUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onUpdatePtr
newCallback_GemServerListener_onUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServerListener_onImageReady : public Callback_GemServerListener_onImageReady_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServerListener_onImageReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServerListener_onImageReadyPtr
newCallback_GemServerListener_onImageReady(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onImageReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServerListener_onImageReadyPtr
newCallback_GemServerListener_onImageReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onImageReady<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServerListener_onImageReadyPtr
newCallback_GemServerListener_onImageReady(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onImageReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServerListener_onImageReadyPtr
newCallback_GemServerListener_onImageReady(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onImageReady<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServerListener_onImageReady : public Callback_GemServerListener_onImageReady_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServerListener_onImageReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServerListener_onImageReadyPtr
newCallback_GemServerListener_onImageReady(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onImageReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onImageReadyPtr
newCallback_GemServerListener_onImageReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onImageReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onImageReadyPtr
newCallback_GemServerListener_onImageReady(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onImageReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onImageReadyPtr
newCallback_GemServerListener_onImageReady(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onImageReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServerListener_onReset : public Callback_GemServerListener_onReset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServerListener_onReset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServerListener_onResetPtr
newCallback_GemServerListener_onReset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onReset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServerListener_onResetPtr
newCallback_GemServerListener_onReset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onReset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServerListener_onResetPtr
newCallback_GemServerListener_onReset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onReset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServerListener_onResetPtr
newCallback_GemServerListener_onReset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServerListener_onReset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServerListener_onReset : public Callback_GemServerListener_onReset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServerListener_onReset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServerListener_onResetPtr
newCallback_GemServerListener_onReset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onReset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onResetPtr
newCallback_GemServerListener_onReset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onReset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onResetPtr
newCallback_GemServerListener_onReset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onReset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServerListener_onResetPtr
newCallback_GemServerListener_onReset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServerListener_onReset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_submitBatch : public Callback_GemServer_submitBatch_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_submitBatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_submitBatchPtr
newCallback_GemServer_submitBatch(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_submitBatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_submitBatchPtr
newCallback_GemServer_submitBatch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_submitBatch<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_submitBatchPtr
newCallback_GemServer_submitBatch(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_submitBatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_submitBatchPtr
newCallback_GemServer_submitBatch(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_submitBatch<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_submitBatch : public Callback_GemServer_submitBatch_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_submitBatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_submitBatchPtr
newCallback_GemServer_submitBatch(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_submitBatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_submitBatchPtr
newCallback_GemServer_submitBatch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_submitBatch<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_submitBatchPtr
newCallback_GemServer_submitBatch(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_submitBatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_submitBatchPtr
newCallback_GemServer_submitBatch(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_submitBatch<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_startJob : public Callback_GemServer_startJob_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_startJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_startJobPtr
newCallback_GemServer_startJob(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_startJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_startJobPtr
newCallback_GemServer_startJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_startJob<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_startJobPtr
newCallback_GemServer_startJob(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_startJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_startJobPtr
newCallback_GemServer_startJob(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_startJob<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_startJob : public Callback_GemServer_startJob_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_startJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_startJobPtr
newCallback_GemServer_startJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_startJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_startJobPtr
newCallback_GemServer_startJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_startJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_startJobPtr
newCallback_GemServer_startJob(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_startJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_startJobPtr
newCallback_GemServer_startJob(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_startJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_stopJob : public Callback_GemServer_stopJob_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_stopJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_stopJobPtr
newCallback_GemServer_stopJob(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_stopJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_stopJobPtr
newCallback_GemServer_stopJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_stopJob<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_stopJobPtr
newCallback_GemServer_stopJob(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_stopJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_stopJobPtr
newCallback_GemServer_stopJob(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_stopJob<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_stopJob : public Callback_GemServer_stopJob_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_stopJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_stopJobPtr
newCallback_GemServer_stopJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_stopJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_stopJobPtr
newCallback_GemServer_stopJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_stopJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_stopJobPtr
newCallback_GemServer_stopJob(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_stopJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_stopJobPtr
newCallback_GemServer_stopJob(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_stopJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_invalidate : public Callback_GemServer_invalidate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_invalidate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_invalidatePtr
newCallback_GemServer_invalidate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_invalidate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_invalidatePtr
newCallback_GemServer_invalidate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_invalidate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_invalidatePtr
newCallback_GemServer_invalidate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_invalidate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_invalidatePtr
newCallback_GemServer_invalidate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_invalidate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_invalidate : public Callback_GemServer_invalidate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_invalidate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_invalidatePtr
newCallback_GemServer_invalidate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_invalidate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_invalidatePtr
newCallback_GemServer_invalidate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_invalidate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_invalidatePtr
newCallback_GemServer_invalidate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_invalidate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_invalidatePtr
newCallback_GemServer_invalidate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_invalidate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_reset : public Callback_GemServer_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_resetPtr
newCallback_GemServer_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_resetPtr
newCallback_GemServer_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_reset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_resetPtr
newCallback_GemServer_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_resetPtr
newCallback_GemServer_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_reset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_reset : public Callback_GemServer_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_resetPtr
newCallback_GemServer_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_resetPtr
newCallback_GemServer_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_resetPtr
newCallback_GemServer_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_resetPtr
newCallback_GemServer_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_dumpStatus : public Callback_GemServer_dumpStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_GemServer_dumpStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gem::GemServerPrx __proxy = ::Gem::GemServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_dumpStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_GemServer_dumpStatusPtr
newCallback_GemServer_dumpStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_dumpStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_dumpStatusPtr
newCallback_GemServer_dumpStatus(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_dumpStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_dumpStatus : public Callback_GemServer_dumpStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_GemServer_dumpStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gem::GemServerPrx __proxy = ::Gem::GemServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_dumpStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_GemServer_dumpStatusPtr
newCallback_GemServer_dumpStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_dumpStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_dumpStatusPtr
newCallback_GemServer_dumpStatus(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_dumpStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_getJobs : public Callback_GemServer_getJobs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Gem::JobSeq&);

    CallbackNC_GemServer_getJobs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gem::GemServerPrx __proxy = ::Gem::GemServerPrx::uncheckedCast(__result->getProxy());
        ::Gem::JobSeq __ret;
        try
        {
            __ret = __proxy->end_getJobs(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_GemServer_getJobsPtr
newCallback_GemServer_getJobs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gem::JobSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_getJobs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_getJobsPtr
newCallback_GemServer_getJobs(T* instance, void (T::*cb)(const ::Gem::JobSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_getJobs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_getJobs : public Callback_GemServer_getJobs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Gem::JobSeq&, const CT&);

    Callback_GemServer_getJobs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gem::GemServerPrx __proxy = ::Gem::GemServerPrx::uncheckedCast(__result->getProxy());
        ::Gem::JobSeq __ret;
        try
        {
            __ret = __proxy->end_getJobs(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_GemServer_getJobsPtr
newCallback_GemServer_getJobs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gem::JobSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_getJobs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_getJobsPtr
newCallback_GemServer_getJobs(T* instance, void (T::*cb)(const ::Gem::JobSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_getJobs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_getStartableJob : public Callback_GemServer_getStartableJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Gem::JobSeq&);

    CallbackNC_GemServer_getStartableJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gem::GemServerPrx __proxy = ::Gem::GemServerPrx::uncheckedCast(__result->getProxy());
        ::Gem::JobSeq __ret;
        try
        {
            __ret = __proxy->end_getStartableJob(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_GemServer_getStartableJobPtr
newCallback_GemServer_getStartableJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gem::JobSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_getStartableJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_getStartableJobPtr
newCallback_GemServer_getStartableJob(T* instance, void (T::*cb)(const ::Gem::JobSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_getStartableJob<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_getStartableJob : public Callback_GemServer_getStartableJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Gem::JobSeq&, const CT&);

    Callback_GemServer_getStartableJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gem::GemServerPrx __proxy = ::Gem::GemServerPrx::uncheckedCast(__result->getProxy());
        ::Gem::JobSeq __ret;
        try
        {
            __ret = __proxy->end_getStartableJob(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_GemServer_getStartableJobPtr
newCallback_GemServer_getStartableJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gem::JobSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_getStartableJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_getStartableJobPtr
newCallback_GemServer_getStartableJob(T* instance, void (T::*cb)(const ::Gem::JobSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_getStartableJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_getJob : public Callback_GemServer_getJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Gem::Job&);

    CallbackNC_GemServer_getJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gem::GemServerPrx __proxy = ::Gem::GemServerPrx::uncheckedCast(__result->getProxy());
        ::Gem::Job __ret;
        try
        {
            __ret = __proxy->end_getJob(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_GemServer_getJobPtr
newCallback_GemServer_getJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gem::Job&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_getJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_getJobPtr
newCallback_GemServer_getJob(T* instance, void (T::*cb)(const ::Gem::Job&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_getJob<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_getJob : public Callback_GemServer_getJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Gem::Job&, const CT&);

    Callback_GemServer_getJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gem::GemServerPrx __proxy = ::Gem::GemServerPrx::uncheckedCast(__result->getProxy());
        ::Gem::Job __ret;
        try
        {
            __ret = __proxy->end_getJob(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_GemServer_getJobPtr
newCallback_GemServer_getJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gem::Job&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_getJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_getJobPtr
newCallback_GemServer_getJob(T* instance, void (T::*cb)(const ::Gem::Job&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_getJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_addListener : public Callback_GemServer_addListener_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_addListener(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_addListenerPtr
newCallback_GemServer_addListener(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_addListener<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_addListenerPtr
newCallback_GemServer_addListener(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_addListener<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_addListenerPtr
newCallback_GemServer_addListener(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_addListener<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_addListenerPtr
newCallback_GemServer_addListener(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_addListener<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_addListener : public Callback_GemServer_addListener_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_addListener(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_addListenerPtr
newCallback_GemServer_addListener(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_addListener<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_addListenerPtr
newCallback_GemServer_addListener(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_addListener<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_addListenerPtr
newCallback_GemServer_addListener(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_addListener<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_addListenerPtr
newCallback_GemServer_addListener(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_addListener<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_addListenerWithIdent : public Callback_GemServer_addListenerWithIdent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_addListenerWithIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_addListenerWithIdentPtr
newCallback_GemServer_addListenerWithIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_addListenerWithIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_addListenerWithIdentPtr
newCallback_GemServer_addListenerWithIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_addListenerWithIdent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_addListenerWithIdentPtr
newCallback_GemServer_addListenerWithIdent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_addListenerWithIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_addListenerWithIdentPtr
newCallback_GemServer_addListenerWithIdent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_addListenerWithIdent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_addListenerWithIdent : public Callback_GemServer_addListenerWithIdent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_addListenerWithIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_addListenerWithIdentPtr
newCallback_GemServer_addListenerWithIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_addListenerWithIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_addListenerWithIdentPtr
newCallback_GemServer_addListenerWithIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_addListenerWithIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_addListenerWithIdentPtr
newCallback_GemServer_addListenerWithIdent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_addListenerWithIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_addListenerWithIdentPtr
newCallback_GemServer_addListenerWithIdent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_addListenerWithIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_onWorkerStates : public Callback_GemServer_onWorkerStates_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_onWorkerStates(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_onWorkerStatesPtr
newCallback_GemServer_onWorkerStates(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_onWorkerStates<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_onWorkerStatesPtr
newCallback_GemServer_onWorkerStates(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_onWorkerStates<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_onWorkerStatesPtr
newCallback_GemServer_onWorkerStates(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_onWorkerStates<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_onWorkerStatesPtr
newCallback_GemServer_onWorkerStates(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_onWorkerStates<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_onWorkerStates : public Callback_GemServer_onWorkerStates_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_onWorkerStates(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_onWorkerStatesPtr
newCallback_GemServer_onWorkerStates(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_onWorkerStates<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_onWorkerStatesPtr
newCallback_GemServer_onWorkerStates(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_onWorkerStates<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_onWorkerStatesPtr
newCallback_GemServer_onWorkerStates(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_onWorkerStates<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_onWorkerStatesPtr
newCallback_GemServer_onWorkerStates(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_onWorkerStates<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GemServer_imageReady : public Callback_GemServer_imageReady_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GemServer_imageReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GemServer_imageReadyPtr
newCallback_GemServer_imageReady(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_imageReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_imageReadyPtr
newCallback_GemServer_imageReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_imageReady<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GemServer_imageReadyPtr
newCallback_GemServer_imageReady(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_imageReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GemServer_imageReadyPtr
newCallback_GemServer_imageReady(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GemServer_imageReady<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GemServer_imageReady : public Callback_GemServer_imageReady_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GemServer_imageReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GemServer_imageReadyPtr
newCallback_GemServer_imageReady(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_imageReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_imageReadyPtr
newCallback_GemServer_imageReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_imageReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_imageReadyPtr
newCallback_GemServer_imageReady(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_imageReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GemServer_imageReadyPtr
newCallback_GemServer_imageReady(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GemServer_imageReady<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
