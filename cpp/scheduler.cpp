// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `scheduler.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <scheduler.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::scheduler::DuplicateJob> iceC_scheduler_DuplicateJob_init("::scheduler::DuplicateJob");

const ::IceInternal::DefaultUserExceptionFactoryInit<::scheduler::JobCycleDetected> iceC_scheduler_JobCycleDetected_init("::scheduler::JobCycleDetected");

const ::IceInternal::DefaultUserExceptionFactoryInit<::scheduler::JobNotExist> iceC_scheduler_JobNotExist_init("::scheduler::JobNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::scheduler::JobNotStartable> iceC_scheduler_JobNotStartable_init("::scheduler::JobNotStartable");

const ::std::string iceC_scheduler_SchedulerServerListener_ids[2] =
{
    "::Ice::Object",
    "::scheduler::SchedulerServerListener"
};
const ::std::string iceC_scheduler_SchedulerServerListener_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "onImage",
    "onImageReady",
    "onReset",
    "onUpdate"
};
const ::std::string iceC_scheduler_SchedulerServerListener_onImage_name = "onImage";
const ::std::string iceC_scheduler_SchedulerServerListener_onUpdate_name = "onUpdate";
const ::std::string iceC_scheduler_SchedulerServerListener_onImageReady_name = "onImageReady";
const ::std::string iceC_scheduler_SchedulerServerListener_onReset_name = "onReset";

const ::std::string iceC_scheduler_SchedulerServer_ids[2] =
{
    "::Ice::Object",
    "::scheduler::SchedulerServer"
};
const ::std::string iceC_scheduler_SchedulerServer_ops[] =
{
    "addListener",
    "addListenerWithIdent",
    "dumpStatus",
    "getImage",
    "getJob",
    "getJobs",
    "getStartableJob",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "imageReady",
    "invalidateJob",
    "onWorkerUpdate",
    "reset",
    "setState",
    "startJob",
    "stopJob",
    "submitBatch"
};
const ::std::string iceC_scheduler_SchedulerServer_submitBatch_name = "submitBatch";
const ::std::string iceC_scheduler_SchedulerServer_startJob_name = "startJob";
const ::std::string iceC_scheduler_SchedulerServer_stopJob_name = "stopJob";
const ::std::string iceC_scheduler_SchedulerServer_invalidateJob_name = "invalidateJob";
const ::std::string iceC_scheduler_SchedulerServer_reset_name = "reset";
const ::std::string iceC_scheduler_SchedulerServer_dumpStatus_name = "dumpStatus";
const ::std::string iceC_scheduler_SchedulerServer_getJobs_name = "getJobs";
const ::std::string iceC_scheduler_SchedulerServer_getStartableJob_name = "getStartableJob";
const ::std::string iceC_scheduler_SchedulerServer_getJob_name = "getJob";
const ::std::string iceC_scheduler_SchedulerServer_addListener_name = "addListener";
const ::std::string iceC_scheduler_SchedulerServer_addListenerWithIdent_name = "addListenerWithIdent";
const ::std::string iceC_scheduler_SchedulerServer_onWorkerUpdate_name = "onWorkerUpdate";
const ::std::string iceC_scheduler_SchedulerServer_imageReady_name = "imageReady";
const ::std::string iceC_scheduler_SchedulerServer_setState_name = "setState";
const ::std::string iceC_scheduler_SchedulerServer_getImage_name = "getImage";

}

scheduler::DuplicateJob::~DuplicateJob()
{
}

const ::std::string&
scheduler::DuplicateJob::ice_staticId()
{
    static const ::std::string typeId = "::scheduler::DuplicateJob";
    return typeId;
}

scheduler::JobCycleDetected::~JobCycleDetected()
{
}

const ::std::string&
scheduler::JobCycleDetected::ice_staticId()
{
    static const ::std::string typeId = "::scheduler::JobCycleDetected";
    return typeId;
}

scheduler::JobNotExist::~JobNotExist()
{
}

const ::std::string&
scheduler::JobNotExist::ice_staticId()
{
    static const ::std::string typeId = "::scheduler::JobNotExist";
    return typeId;
}

scheduler::JobNotStartable::~JobNotStartable()
{
}

const ::std::string&
scheduler::JobNotStartable::ice_staticId()
{
    static const ::std::string typeId = "::scheduler::JobNotStartable";
    return typeId;
}

bool
scheduler::SchedulerServerListener::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_scheduler_SchedulerServerListener_ids, iceC_scheduler_SchedulerServerListener_ids + 2, s);
}

::std::vector<::std::string>
scheduler::SchedulerServerListener::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_scheduler_SchedulerServerListener_ids[0], &iceC_scheduler_SchedulerServerListener_ids[2]);
}

::std::string
scheduler::SchedulerServerListener::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
scheduler::SchedulerServerListener::ice_staticId()
{
    static const ::std::string typeId = "::scheduler::SchedulerServerListener";
    return typeId;
}

bool
scheduler::SchedulerServerListener::_iceD_onImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::Image iceP_image;
    istr->readAll(iceP_image);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->onImageAsync(::std::move(iceP_image), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServerListener::_iceD_onUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::JobDTOSeq iceP_jobs;
    istr->readAll(iceP_jobs);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->onUpdateAsync(::std::move(iceP_jobs), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServerListener::_iceD_onImageReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_batchId;
    ::std::string iceP_imgId;
    istr->readAll(iceP_batchId, iceP_imgId);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->onImageReadyAsync(::std::move(iceP_batchId), ::std::move(iceP_imgId), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServerListener::_iceD_onReset(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->onResetAsync(inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServerListener::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_scheduler_SchedulerServerListener_ops, iceC_scheduler_SchedulerServerListener_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_scheduler_SchedulerServerListener_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_onImage(in, current);
        }
        case 5:
        {
            return _iceD_onImageReady(in, current);
        }
        case 6:
        {
            return _iceD_onReset(in, current);
        }
        case 7:
        {
            return _iceD_onUpdate(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
scheduler::SchedulerServer::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_scheduler_SchedulerServer_ids, iceC_scheduler_SchedulerServer_ids + 2, s);
}

::std::vector<::std::string>
scheduler::SchedulerServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_scheduler_SchedulerServer_ids[0], &iceC_scheduler_SchedulerServer_ids[2]);
}

::std::string
scheduler::SchedulerServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
scheduler::SchedulerServer::ice_staticId()
{
    static const ::std::string typeId = "::scheduler::SchedulerServer";
    return typeId;
}

bool
scheduler::SchedulerServer::_iceD_submitBatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::Batch iceP_batch;
    istr->readAll(iceP_batch);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->submitBatchAsync(::std::move(iceP_batch), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_startJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->startJobAsync(::std::move(iceP_id), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_stopJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->stopJobAsync(::std::move(iceP_id), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_invalidateJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->invalidateJobAsync(::std::move(iceP_id), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_reset(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->resetAsync(inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_dumpStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::string& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->dumpStatusAsync(responseCB, inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_getJobs(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::scheduler::JobDTOSeq& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->getJobsAsync(responseCB, inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_getStartableJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::WorkerId iceP_worker;
    istr->readAll(iceP_worker);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::scheduler::JobSeq& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->getStartableJobAsync(::std::move(iceP_worker), responseCB, inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_getJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::scheduler::JobDTO& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->getJobAsync(::std::move(iceP_id), responseCB, inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_addListener(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::scheduler::SchedulerServerListenerPrx> iceP_listener;
    istr->readAll(iceP_listener);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->addListenerAsync(::std::move(iceP_listener), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_addListenerWithIdent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Identity iceP_ident;
    istr->readAll(iceP_ident);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->addListenerWithIdentAsync(::std::move(iceP_ident), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_onWorkerUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::WorkerUpdate iceP_x;
    istr->readAll(iceP_x);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->onWorkerUpdateAsync(::std::move(iceP_x), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_imageReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_batchId;
    ::std::string iceP_imgId;
    istr->readAll(iceP_batchId, iceP_imgId);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->imageReadyAsync(::std::move(iceP_batchId), ::std::move(iceP_imgId), inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_setState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    ::scheduler::EnumJobState iceP_state;
    istr->readAll(iceP_id, iceP_state);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->setStateAsync(::std::move(iceP_id), iceP_state, inA->response(), inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_getImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::scheduler::Image& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->getImageAsync(responseCB, inA->exception(), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_scheduler_SchedulerServer_ops, iceC_scheduler_SchedulerServer_ops + 19, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_scheduler_SchedulerServer_ops)
    {
        case 0:
        {
            return _iceD_addListener(in, current);
        }
        case 1:
        {
            return _iceD_addListenerWithIdent(in, current);
        }
        case 2:
        {
            return _iceD_dumpStatus(in, current);
        }
        case 3:
        {
            return _iceD_getImage(in, current);
        }
        case 4:
        {
            return _iceD_getJob(in, current);
        }
        case 5:
        {
            return _iceD_getJobs(in, current);
        }
        case 6:
        {
            return _iceD_getStartableJob(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_imageReady(in, current);
        }
        case 12:
        {
            return _iceD_invalidateJob(in, current);
        }
        case 13:
        {
            return _iceD_onWorkerUpdate(in, current);
        }
        case 14:
        {
            return _iceD_reset(in, current);
        }
        case 15:
        {
            return _iceD_setState(in, current);
        }
        case 16:
        {
            return _iceD_startJob(in, current);
        }
        case 17:
        {
            return _iceD_stopJob(in, current);
        }
        case 18:
        {
            return _iceD_submitBatch(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
scheduler::SchedulerServerListenerPrx::_iceI_onImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::scheduler::Image& iceP_image, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServerListener_onImage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_image);
        },
        nullptr);
}

void
scheduler::SchedulerServerListenerPrx::_iceI_onUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServerListener_onUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_jobs);
        },
        nullptr);
}

void
scheduler::SchedulerServerListenerPrx::_iceI_onImageReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServerListener_onImageReady_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_batchId, iceP_imgId);
        },
        nullptr);
}

void
scheduler::SchedulerServerListenerPrx::_iceI_onReset(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServerListener_onReset_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
scheduler::SchedulerServerListenerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<SchedulerServerListenerPrx>();
}

const ::std::string&
scheduler::SchedulerServerListenerPrx::ice_staticId()
{
    return scheduler::SchedulerServerListener::ice_staticId();
}

void
scheduler::SchedulerServerPrx::_iceI_submitBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::scheduler::Batch& iceP_batch, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_submitBatch_name);
    outAsync->invoke(iceC_scheduler_SchedulerServer_submitBatch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_batch);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::scheduler::DuplicateJob&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
scheduler::SchedulerServerPrx::_iceI_startJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::scheduler::JobId& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_startJob_name);
    outAsync->invoke(iceC_scheduler_SchedulerServer_startJob_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::scheduler::JobNotExist&)
            {
                throw;
            }
            catch(const ::scheduler::JobNotStartable&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
scheduler::SchedulerServerPrx::_iceI_stopJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::scheduler::JobId& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServer_stopJob_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_invalidateJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::scheduler::JobId& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServer_invalidateJob_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_reset(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServer_reset_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_dumpStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_dumpStatus_name);
    outAsync->invoke(iceC_scheduler_SchedulerServer_dumpStatus_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_getJobs(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::scheduler::JobDTOSeq>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_getJobs_name);
    outAsync->invoke(iceC_scheduler_SchedulerServer_getJobs_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_getStartableJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::scheduler::JobSeq>>& outAsync, const ::scheduler::WorkerId& iceP_worker, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_getStartableJob_name);
    outAsync->invoke(iceC_scheduler_SchedulerServer_getStartableJob_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_worker);
        },
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_getJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::scheduler::JobDTO>>& outAsync, const ::scheduler::JobId& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_getJob_name);
    outAsync->invoke(iceC_scheduler_SchedulerServer_getJob_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::scheduler::JobNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
scheduler::SchedulerServerPrx::_iceI_addListener(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::scheduler::SchedulerServerListenerPrx>& iceP_listener, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServer_addListener_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_listener);
        },
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_addListenerWithIdent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Identity& iceP_ident, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServer_addListenerWithIdent_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ident);
        },
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_onWorkerUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServer_onWorkerUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x);
        },
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_imageReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServer_imageReady_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_batchId, iceP_imgId);
        },
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_setState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_scheduler_SchedulerServer_setState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_state);
        },
        nullptr);
}

void
scheduler::SchedulerServerPrx::_iceI_getImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::scheduler::Image>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_getImage_name);
    outAsync->invoke(iceC_scheduler_SchedulerServer_getImage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
scheduler::SchedulerServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<SchedulerServerPrx>();
}

const ::std::string&
scheduler::SchedulerServerPrx::ice_staticId()
{
    return scheduler::SchedulerServer::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_scheduler_SchedulerServerListener_onImage_name = "onImage";

const ::std::string iceC_scheduler_SchedulerServerListener_onUpdate_name = "onUpdate";

const ::std::string iceC_scheduler_SchedulerServerListener_onImageReady_name = "onImageReady";

const ::std::string iceC_scheduler_SchedulerServerListener_onReset_name = "onReset";

const ::std::string iceC_scheduler_SchedulerServer_submitBatch_name = "submitBatch";

const ::std::string iceC_scheduler_SchedulerServer_startJob_name = "startJob";

const ::std::string iceC_scheduler_SchedulerServer_stopJob_name = "stopJob";

const ::std::string iceC_scheduler_SchedulerServer_invalidateJob_name = "invalidateJob";

const ::std::string iceC_scheduler_SchedulerServer_reset_name = "reset";

const ::std::string iceC_scheduler_SchedulerServer_dumpStatus_name = "dumpStatus";

const ::std::string iceC_scheduler_SchedulerServer_getJobs_name = "getJobs";

const ::std::string iceC_scheduler_SchedulerServer_getStartableJob_name = "getStartableJob";

const ::std::string iceC_scheduler_SchedulerServer_getJob_name = "getJob";

const ::std::string iceC_scheduler_SchedulerServer_addListener_name = "addListener";

const ::std::string iceC_scheduler_SchedulerServer_addListenerWithIdent_name = "addListenerWithIdent";

const ::std::string iceC_scheduler_SchedulerServer_onWorkerUpdate_name = "onWorkerUpdate";

const ::std::string iceC_scheduler_SchedulerServer_imageReady_name = "imageReady";

const ::std::string iceC_scheduler_SchedulerServer_setState_name = "setState";

const ::std::string iceC_scheduler_SchedulerServer_getImage_name = "getImage";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::scheduler::DuplicateJob> iceC_scheduler_DuplicateJob_init("::scheduler::DuplicateJob");

}

scheduler::DuplicateJob::DuplicateJob(const ::scheduler::JobIdSeq& iceP_id) :
    ::Ice::UserException(),
    id(iceP_id)
{
}

scheduler::DuplicateJob::~DuplicateJob() throw()
{
}

::std::string
scheduler::DuplicateJob::ice_id() const
{
    return "::scheduler::DuplicateJob";
}

scheduler::DuplicateJob*
scheduler::DuplicateJob::ice_clone() const
{
    return new DuplicateJob(*this);
}

void
scheduler::DuplicateJob::ice_throw() const
{
    throw *this;
}

void
scheduler::DuplicateJob::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::scheduler::DuplicateJob", -1, true);
    Ice::StreamWriter< ::scheduler::DuplicateJob, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
scheduler::DuplicateJob::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::scheduler::DuplicateJob, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::scheduler::JobCycleDetected> iceC_scheduler_JobCycleDetected_init("::scheduler::JobCycleDetected");

}

scheduler::JobCycleDetected::JobCycleDetected(const ::scheduler::JobIdSeq& iceP_badNodes) :
    ::Ice::UserException(),
    badNodes(iceP_badNodes)
{
}

scheduler::JobCycleDetected::~JobCycleDetected() throw()
{
}

::std::string
scheduler::JobCycleDetected::ice_id() const
{
    return "::scheduler::JobCycleDetected";
}

scheduler::JobCycleDetected*
scheduler::JobCycleDetected::ice_clone() const
{
    return new JobCycleDetected(*this);
}

void
scheduler::JobCycleDetected::ice_throw() const
{
    throw *this;
}

void
scheduler::JobCycleDetected::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::scheduler::JobCycleDetected", -1, true);
    Ice::StreamWriter< ::scheduler::JobCycleDetected, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
scheduler::JobCycleDetected::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::scheduler::JobCycleDetected, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::scheduler::JobNotExist> iceC_scheduler_JobNotExist_init("::scheduler::JobNotExist");

}

scheduler::JobNotExist::JobNotExist(const ::scheduler::JobIdSeq& iceP_id) :
    ::Ice::UserException(),
    id(iceP_id)
{
}

scheduler::JobNotExist::~JobNotExist() throw()
{
}

::std::string
scheduler::JobNotExist::ice_id() const
{
    return "::scheduler::JobNotExist";
}

scheduler::JobNotExist*
scheduler::JobNotExist::ice_clone() const
{
    return new JobNotExist(*this);
}

void
scheduler::JobNotExist::ice_throw() const
{
    throw *this;
}

void
scheduler::JobNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::scheduler::JobNotExist", -1, true);
    Ice::StreamWriter< ::scheduler::JobNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
scheduler::JobNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::scheduler::JobNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::scheduler::JobNotStartable> iceC_scheduler_JobNotStartable_init("::scheduler::JobNotStartable");

}

scheduler::JobNotStartable::JobNotStartable(const ::scheduler::JobId& iceP_id) :
    ::Ice::UserException(),
    id(iceP_id)
{
}

scheduler::JobNotStartable::~JobNotStartable() throw()
{
}

::std::string
scheduler::JobNotStartable::ice_id() const
{
    return "::scheduler::JobNotStartable";
}

scheduler::JobNotStartable*
scheduler::JobNotStartable::ice_clone() const
{
    return new JobNotStartable(*this);
}

void
scheduler::JobNotStartable::ice_throw() const
{
    throw *this;
}

void
scheduler::JobNotStartable::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::scheduler::JobNotStartable", -1, true);
    Ice::StreamWriter< ::scheduler::JobNotStartable, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
scheduler::JobNotStartable::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::scheduler::JobNotStartable, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

scheduler::AMD_SchedulerServerListener_onImage::~AMD_SchedulerServerListener_onImage()
{
}

scheduler::AMD_SchedulerServerListener_onUpdate::~AMD_SchedulerServerListener_onUpdate()
{
}

scheduler::AMD_SchedulerServerListener_onImageReady::~AMD_SchedulerServerListener_onImageReady()
{
}

scheduler::AMD_SchedulerServerListener_onReset::~AMD_SchedulerServerListener_onReset()
{
}

scheduler::AMD_SchedulerServer_submitBatch::~AMD_SchedulerServer_submitBatch()
{
}

scheduler::AMD_SchedulerServer_startJob::~AMD_SchedulerServer_startJob()
{
}

scheduler::AMD_SchedulerServer_stopJob::~AMD_SchedulerServer_stopJob()
{
}

scheduler::AMD_SchedulerServer_invalidateJob::~AMD_SchedulerServer_invalidateJob()
{
}

scheduler::AMD_SchedulerServer_reset::~AMD_SchedulerServer_reset()
{
}

scheduler::AMD_SchedulerServer_dumpStatus::~AMD_SchedulerServer_dumpStatus()
{
}

scheduler::AMD_SchedulerServer_getJobs::~AMD_SchedulerServer_getJobs()
{
}

scheduler::AMD_SchedulerServer_getStartableJob::~AMD_SchedulerServer_getStartableJob()
{
}

scheduler::AMD_SchedulerServer_getJob::~AMD_SchedulerServer_getJob()
{
}

scheduler::AMD_SchedulerServer_addListener::~AMD_SchedulerServer_addListener()
{
}

scheduler::AMD_SchedulerServer_addListenerWithIdent::~AMD_SchedulerServer_addListenerWithIdent()
{
}

scheduler::AMD_SchedulerServer_onWorkerUpdate::~AMD_SchedulerServer_onWorkerUpdate()
{
}

scheduler::AMD_SchedulerServer_imageReady::~AMD_SchedulerServer_imageReady()
{
}

scheduler::AMD_SchedulerServer_setState::~AMD_SchedulerServer_setState()
{
}

scheduler::AMD_SchedulerServer_getImage::~AMD_SchedulerServer_getImage()
{
}

IceAsync::scheduler::AMD_SchedulerServerListener_onImage::AMD_SchedulerServerListener_onImage(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServerListener_onImage::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServerListener_onUpdate::AMD_SchedulerServerListener_onUpdate(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServerListener_onUpdate::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServerListener_onImageReady::AMD_SchedulerServerListener_onImageReady(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServerListener_onImageReady::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServerListener_onReset::AMD_SchedulerServerListener_onReset(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServerListener_onReset::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_submitBatch::AMD_SchedulerServer_submitBatch(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_submitBatch::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_startJob::AMD_SchedulerServer_startJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_startJob::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_stopJob::AMD_SchedulerServer_stopJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_stopJob::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_invalidateJob::AMD_SchedulerServer_invalidateJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_invalidateJob::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_reset::AMD_SchedulerServer_reset(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_reset::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_dumpStatus::AMD_SchedulerServer_dumpStatus(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_dumpStatus::ice_response(const ::std::string& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_getJobs::AMD_SchedulerServer_getJobs(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_getJobs::ice_response(const ::scheduler::JobDTOSeq& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_getStartableJob::AMD_SchedulerServer_getStartableJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_getStartableJob::ice_response(const ::scheduler::JobSeq& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_getJob::AMD_SchedulerServer_getJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_getJob::ice_response(const ::scheduler::JobDTO& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_addListener::AMD_SchedulerServer_addListener(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_addListener::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_addListenerWithIdent::AMD_SchedulerServer_addListenerWithIdent(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_addListenerWithIdent::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_onWorkerUpdate::AMD_SchedulerServer_onWorkerUpdate(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_onWorkerUpdate::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_imageReady::AMD_SchedulerServer_imageReady(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_imageReady::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_setState::AMD_SchedulerServer_setState(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_setState::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::scheduler::AMD_SchedulerServer_getImage::AMD_SchedulerServer_getImage(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_getImage::ice_response(const ::scheduler::Image& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
::IceProxy::Ice::Object* ::IceProxy::scheduler::upCast(::IceProxy::scheduler::SchedulerServerListener* p) { return p; }

void
::IceProxy::scheduler::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::scheduler::SchedulerServerListener>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::scheduler::SchedulerServerListener;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServerListener::_iceI_begin_onImage(const ::scheduler::Image& iceP_image, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServerListener_onImage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServerListener_onImage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_image);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServerListener_onImage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServerListener::end_onImage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServerListener_onImage_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServerListener::_iceI_begin_onUpdate(const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServerListener_onUpdate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServerListener_onUpdate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_jobs);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServerListener_onUpdate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServerListener::end_onUpdate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServerListener_onUpdate_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServerListener::_iceI_begin_onImageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServerListener_onImageReady_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServerListener_onImageReady_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_batchId);
        ostr->write(iceP_imgId);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServerListener_onImageReady_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServerListener::end_onImageReady(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServerListener_onImageReady_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServerListener::_iceI_begin_onReset(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServerListener_onReset_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServerListener_onReset_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_scheduler_SchedulerServerListener_onReset_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServerListener::end_onReset(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServerListener_onReset_name);
}

::IceProxy::Ice::Object*
IceProxy::scheduler::SchedulerServerListener::_newInstance() const
{
    return new SchedulerServerListener;
}

const ::std::string&
IceProxy::scheduler::SchedulerServerListener::ice_staticId()
{
    return ::scheduler::SchedulerServerListener::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::scheduler::upCast(::IceProxy::scheduler::SchedulerServer* p) { return p; }

void
::IceProxy::scheduler::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::scheduler::SchedulerServer>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::scheduler::SchedulerServer;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_submitBatch(const ::scheduler::Batch& iceP_batch, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_submitBatch_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_submitBatch_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_submitBatch_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_batch);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_submitBatch_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_submitBatch(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_scheduler_SchedulerServer_submitBatch_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::scheduler::DuplicateJob&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_startJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_startJob_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_startJob_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_startJob_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_startJob_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_startJob(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_scheduler_SchedulerServer_startJob_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::scheduler::JobNotExist&)
        {
            throw;
        }
        catch(const ::scheduler::JobNotStartable&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_stopJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_stopJob_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_stopJob_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_stopJob_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_stopJob(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServer_stopJob_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_invalidateJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_invalidateJob_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_invalidateJob_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_invalidateJob_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_invalidateJob(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServer_invalidateJob_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_reset(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_reset_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_reset_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_scheduler_SchedulerServer_reset_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_reset(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServer_reset_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_dumpStatus(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_dumpStatus_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_dumpStatus_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_dumpStatus_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_scheduler_SchedulerServer_dumpStatus_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::scheduler::SchedulerServer::end_dumpStatus(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_scheduler_SchedulerServer_dumpStatus_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_getJobs(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_getJobs_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_getJobs_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_getJobs_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_scheduler_SchedulerServer_getJobs_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::scheduler::JobDTOSeq
IceProxy::scheduler::SchedulerServer::end_getJobs(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_scheduler_SchedulerServer_getJobs_name);
    ::scheduler::JobDTOSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_getStartableJob(const ::scheduler::WorkerId& iceP_worker, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_getStartableJob_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_getStartableJob_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_getStartableJob_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_worker);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_getStartableJob_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::scheduler::JobSeq
IceProxy::scheduler::SchedulerServer::end_getStartableJob(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_scheduler_SchedulerServer_getStartableJob_name);
    ::scheduler::JobSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_getJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_getJob_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_getJob_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_getJob_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_getJob_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::scheduler::JobDTO
IceProxy::scheduler::SchedulerServer::end_getJob(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_scheduler_SchedulerServer_getJob_name);
    ::scheduler::JobDTO ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::scheduler::JobNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_addListener(const ::scheduler::SchedulerServerListenerPrx& iceP_listener, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_addListener_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_addListener_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_listener);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_addListener_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_addListener(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServer_addListener_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_addListenerWithIdent(const ::Ice::Identity& iceP_ident, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_addListenerWithIdent_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_addListenerWithIdent_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ident);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_addListenerWithIdent_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_addListenerWithIdent(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServer_addListenerWithIdent_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_onWorkerUpdate(const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_onWorkerUpdate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_onWorkerUpdate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_onWorkerUpdate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_onWorkerUpdate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServer_onWorkerUpdate_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_imageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_imageReady_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_imageReady_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_batchId);
        ostr->write(iceP_imgId);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_imageReady_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_imageReady(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServer_imageReady_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_setState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_setState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_setState_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        ostr->write(iceP_state);
        result->endWriteParams();
        result->invoke(iceC_scheduler_SchedulerServer_setState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::scheduler::SchedulerServer::end_setState(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_scheduler_SchedulerServer_setState_name);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::_iceI_begin_getImage(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_scheduler_SchedulerServer_getImage_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_scheduler_SchedulerServer_getImage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_scheduler_SchedulerServer_getImage_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_scheduler_SchedulerServer_getImage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::scheduler::Image
IceProxy::scheduler::SchedulerServer::end_getImage(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_scheduler_SchedulerServer_getImage_name);
    ::scheduler::Image ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::scheduler::SchedulerServer::_newInstance() const
{
    return new SchedulerServer;
}

const ::std::string&
IceProxy::scheduler::SchedulerServer::ice_staticId()
{
    return ::scheduler::SchedulerServer::ice_staticId();
}

scheduler::SchedulerServerListener::~SchedulerServerListener()
{
}

::Ice::Object* scheduler::upCast(::scheduler::SchedulerServerListener* p) { return p; }


namespace
{
const ::std::string iceC_scheduler_SchedulerServerListener_ids[2] =
{
    "::Ice::Object",
    "::scheduler::SchedulerServerListener"
};

}

bool
scheduler::SchedulerServerListener::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_scheduler_SchedulerServerListener_ids, iceC_scheduler_SchedulerServerListener_ids + 2, s);
}

::std::vector< ::std::string>
scheduler::SchedulerServerListener::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_scheduler_SchedulerServerListener_ids[0], &iceC_scheduler_SchedulerServerListener_ids[2]);
}

const ::std::string&
scheduler::SchedulerServerListener::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
scheduler::SchedulerServerListener::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::scheduler::SchedulerServerListener";
    return typeId;
#else
    return iceC_scheduler_SchedulerServerListener_ids[1];
#endif
}

bool
scheduler::SchedulerServerListener::_iceD_onImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::Image iceP_image;
    istr->read(iceP_image);
    inS.endReadParams();
    this->onImage_async(new IceAsync::scheduler::AMD_SchedulerServerListener_onImage(inS), iceP_image, current);
    return false;
}

bool
scheduler::SchedulerServerListener::_iceD_onUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::JobDTOSeq iceP_jobs;
    istr->read(iceP_jobs);
    inS.endReadParams();
    this->onUpdate_async(new IceAsync::scheduler::AMD_SchedulerServerListener_onUpdate(inS), iceP_jobs, current);
    return false;
}

bool
scheduler::SchedulerServerListener::_iceD_onImageReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_batchId;
    ::std::string iceP_imgId;
    istr->read(iceP_batchId);
    istr->read(iceP_imgId);
    inS.endReadParams();
    this->onImageReady_async(new IceAsync::scheduler::AMD_SchedulerServerListener_onImageReady(inS), iceP_batchId, iceP_imgId, current);
    return false;
}

bool
scheduler::SchedulerServerListener::_iceD_onReset(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->onReset_async(new IceAsync::scheduler::AMD_SchedulerServerListener_onReset(inS), current);
    return false;
}

namespace
{
const ::std::string iceC_scheduler_SchedulerServerListener_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "onImage",
    "onImageReady",
    "onReset",
    "onUpdate"
};

}

bool
scheduler::SchedulerServerListener::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_scheduler_SchedulerServerListener_all, iceC_scheduler_SchedulerServerListener_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_scheduler_SchedulerServerListener_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_onImage(in, current);
        }
        case 5:
        {
            return _iceD_onImageReady(in, current);
        }
        case 6:
        {
            return _iceD_onReset(in, current);
        }
        case 7:
        {
            return _iceD_onUpdate(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
scheduler::SchedulerServerListener::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::scheduler::SchedulerServerListener, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
scheduler::SchedulerServerListener::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::scheduler::SchedulerServerListener, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
scheduler::_icePatchObjectPtr(SchedulerServerListenerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::scheduler::SchedulerServerListenerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::scheduler::SchedulerServerListener::ice_staticId(), v);
    }
}

scheduler::SchedulerServer::~SchedulerServer()
{
}

::Ice::Object* scheduler::upCast(::scheduler::SchedulerServer* p) { return p; }


namespace
{
const ::std::string iceC_scheduler_SchedulerServer_ids[2] =
{
    "::Ice::Object",
    "::scheduler::SchedulerServer"
};

}

bool
scheduler::SchedulerServer::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_scheduler_SchedulerServer_ids, iceC_scheduler_SchedulerServer_ids + 2, s);
}

::std::vector< ::std::string>
scheduler::SchedulerServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_scheduler_SchedulerServer_ids[0], &iceC_scheduler_SchedulerServer_ids[2]);
}

const ::std::string&
scheduler::SchedulerServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
scheduler::SchedulerServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::scheduler::SchedulerServer";
    return typeId;
#else
    return iceC_scheduler_SchedulerServer_ids[1];
#endif
}

bool
scheduler::SchedulerServer::_iceD_submitBatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::Batch iceP_batch;
    istr->read(iceP_batch);
    inS.endReadParams();
    this->submitBatch_async(new IceAsync::scheduler::AMD_SchedulerServer_submitBatch(inS), iceP_batch, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_startJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->startJob_async(new IceAsync::scheduler::AMD_SchedulerServer_startJob(inS), iceP_id, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_stopJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->stopJob_async(new IceAsync::scheduler::AMD_SchedulerServer_stopJob(inS), iceP_id, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_invalidateJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->invalidateJob_async(new IceAsync::scheduler::AMD_SchedulerServer_invalidateJob(inS), iceP_id, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_reset(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->reset_async(new IceAsync::scheduler::AMD_SchedulerServer_reset(inS), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_dumpStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->dumpStatus_async(new IceAsync::scheduler::AMD_SchedulerServer_dumpStatus(inS), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_getJobs(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->getJobs_async(new IceAsync::scheduler::AMD_SchedulerServer_getJobs(inS), current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_getStartableJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::WorkerId iceP_worker;
    istr->read(iceP_worker);
    inS.endReadParams();
    this->getStartableJob_async(new IceAsync::scheduler::AMD_SchedulerServer_getStartableJob(inS), iceP_worker, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_getJob(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->getJob_async(new IceAsync::scheduler::AMD_SchedulerServer_getJob(inS), iceP_id, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_addListener(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::SchedulerServerListenerPrx iceP_listener;
    istr->read(iceP_listener);
    inS.endReadParams();
    this->addListener_async(new IceAsync::scheduler::AMD_SchedulerServer_addListener(inS), iceP_listener, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_addListenerWithIdent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Identity iceP_ident;
    istr->read(iceP_ident);
    inS.endReadParams();
    this->addListenerWithIdent_async(new IceAsync::scheduler::AMD_SchedulerServer_addListenerWithIdent(inS), iceP_ident, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_onWorkerUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::WorkerUpdate iceP_x;
    istr->read(iceP_x);
    inS.endReadParams();
    this->onWorkerUpdate_async(new IceAsync::scheduler::AMD_SchedulerServer_onWorkerUpdate(inS), iceP_x, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_imageReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_batchId;
    ::std::string iceP_imgId;
    istr->read(iceP_batchId);
    istr->read(iceP_imgId);
    inS.endReadParams();
    this->imageReady_async(new IceAsync::scheduler::AMD_SchedulerServer_imageReady(inS), iceP_batchId, iceP_imgId, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_setState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::scheduler::JobId iceP_id;
    ::scheduler::EnumJobState iceP_state;
    istr->read(iceP_id);
    istr->read(iceP_state);
    inS.endReadParams();
    this->setState_async(new IceAsync::scheduler::AMD_SchedulerServer_setState(inS), iceP_id, iceP_state, current);
    return false;
}

bool
scheduler::SchedulerServer::_iceD_getImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->getImage_async(new IceAsync::scheduler::AMD_SchedulerServer_getImage(inS), current);
    return false;
}

namespace
{
const ::std::string iceC_scheduler_SchedulerServer_all[] =
{
    "addListener",
    "addListenerWithIdent",
    "dumpStatus",
    "getImage",
    "getJob",
    "getJobs",
    "getStartableJob",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "imageReady",
    "invalidateJob",
    "onWorkerUpdate",
    "reset",
    "setState",
    "startJob",
    "stopJob",
    "submitBatch"
};

}

bool
scheduler::SchedulerServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_scheduler_SchedulerServer_all, iceC_scheduler_SchedulerServer_all + 19, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_scheduler_SchedulerServer_all)
    {
        case 0:
        {
            return _iceD_addListener(in, current);
        }
        case 1:
        {
            return _iceD_addListenerWithIdent(in, current);
        }
        case 2:
        {
            return _iceD_dumpStatus(in, current);
        }
        case 3:
        {
            return _iceD_getImage(in, current);
        }
        case 4:
        {
            return _iceD_getJob(in, current);
        }
        case 5:
        {
            return _iceD_getJobs(in, current);
        }
        case 6:
        {
            return _iceD_getStartableJob(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_imageReady(in, current);
        }
        case 12:
        {
            return _iceD_invalidateJob(in, current);
        }
        case 13:
        {
            return _iceD_onWorkerUpdate(in, current);
        }
        case 14:
        {
            return _iceD_reset(in, current);
        }
        case 15:
        {
            return _iceD_setState(in, current);
        }
        case 16:
        {
            return _iceD_startJob(in, current);
        }
        case 17:
        {
            return _iceD_stopJob(in, current);
        }
        case 18:
        {
            return _iceD_submitBatch(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
scheduler::SchedulerServer::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::scheduler::SchedulerServer, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
scheduler::SchedulerServer::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::scheduler::SchedulerServer, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
scheduler::_icePatchObjectPtr(SchedulerServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::scheduler::SchedulerServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::scheduler::SchedulerServer::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
