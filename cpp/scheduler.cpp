// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `scheduler.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <scheduler.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __scheduler__SchedulerServerListener__onImage_name = "onImage";

const ::std::string __scheduler__SchedulerServerListener__onUpdate_name = "onUpdate";

const ::std::string __scheduler__SchedulerServerListener__onImageReady_name = "onImageReady";

const ::std::string __scheduler__SchedulerServerListener__onReset_name = "onReset";

const ::std::string __scheduler__SchedulerServer__submitBatch_name = "submitBatch";

const ::std::string __scheduler__SchedulerServer__startJob_name = "startJob";

const ::std::string __scheduler__SchedulerServer__stopJob_name = "stopJob";

const ::std::string __scheduler__SchedulerServer__invalidate_name = "invalidate";

const ::std::string __scheduler__SchedulerServer__reset_name = "reset";

const ::std::string __scheduler__SchedulerServer__dumpStatus_name = "dumpStatus";

const ::std::string __scheduler__SchedulerServer__getJobs_name = "getJobs";

const ::std::string __scheduler__SchedulerServer__getStartableJob_name = "getStartableJob";

const ::std::string __scheduler__SchedulerServer__getJob_name = "getJob";

const ::std::string __scheduler__SchedulerServer__addListener_name = "addListener";

const ::std::string __scheduler__SchedulerServer__addListenerWithIdent_name = "addListenerWithIdent";

const ::std::string __scheduler__SchedulerServer__onWorkerUpdate_name = "onWorkerUpdate";

const ::std::string __scheduler__SchedulerServer__imageReady_name = "imageReady";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::scheduler::DuplicateJob> __scheduler__DuplicateJob_init("::scheduler::DuplicateJob");

}

scheduler::DuplicateJob::DuplicateJob(const ::scheduler::JobId& __ice_id) :
    ::Ice::UserException(),
    id(__ice_id)
{
}

scheduler::DuplicateJob::~DuplicateJob() throw()
{
}

::std::string
scheduler::DuplicateJob::ice_name() const
{
    return "scheduler::DuplicateJob";
}

scheduler::DuplicateJob*
scheduler::DuplicateJob::ice_clone() const
{
    return new DuplicateJob(*this);
}

void
scheduler::DuplicateJob::ice_throw() const
{
    throw *this;
}

void
scheduler::DuplicateJob::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::scheduler::DuplicateJob", -1, true);
    __os->write(id);
    __os->endWriteSlice();
}

void
scheduler::DuplicateJob::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::scheduler::JobNotExist> __scheduler__JobNotExist_init("::scheduler::JobNotExist");

}

scheduler::JobNotExist::JobNotExist(const ::scheduler::JobId& __ice_id) :
    ::Ice::UserException(),
    id(__ice_id)
{
}

scheduler::JobNotExist::~JobNotExist() throw()
{
}

::std::string
scheduler::JobNotExist::ice_name() const
{
    return "scheduler::JobNotExist";
}

scheduler::JobNotExist*
scheduler::JobNotExist::ice_clone() const
{
    return new JobNotExist(*this);
}

void
scheduler::JobNotExist::ice_throw() const
{
    throw *this;
}

void
scheduler::JobNotExist::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::scheduler::JobNotExist", -1, true);
    __os->write(id);
    __os->endWriteSlice();
}

void
scheduler::JobNotExist::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::scheduler::JobNotStartable> __scheduler__JobNotStartable_init("::scheduler::JobNotStartable");

}

scheduler::JobNotStartable::JobNotStartable(const ::scheduler::JobId& __ice_id) :
    ::Ice::UserException(),
    id(__ice_id)
{
}

scheduler::JobNotStartable::~JobNotStartable() throw()
{
}

::std::string
scheduler::JobNotStartable::ice_name() const
{
    return "scheduler::JobNotStartable";
}

scheduler::JobNotStartable*
scheduler::JobNotStartable::ice_clone() const
{
    return new JobNotStartable(*this);
}

void
scheduler::JobNotStartable::ice_throw() const
{
    throw *this;
}

void
scheduler::JobNotStartable::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::scheduler::JobNotStartable", -1, true);
    __os->write(id);
    __os->endWriteSlice();
}

void
scheduler::JobNotStartable::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->endReadSlice();
}

namespace Ice
{
}

IceAsync::scheduler::AMD_SchedulerServerListener_onImage::AMD_SchedulerServerListener_onImage(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServerListener_onImage::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServerListener_onUpdate::AMD_SchedulerServerListener_onUpdate(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServerListener_onUpdate::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServerListener_onImageReady::AMD_SchedulerServerListener_onImageReady(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServerListener_onImageReady::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServerListener_onReset::AMD_SchedulerServerListener_onReset(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServerListener_onReset::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_submitBatch::AMD_SchedulerServer_submitBatch(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_submitBatch::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

void
IceAsync::scheduler::AMD_SchedulerServer_submitBatch::ice_exception(const ::std::exception& ex)
{
    if(const ::scheduler::DuplicateJob* __ex = dynamic_cast<const ::scheduler::DuplicateJob*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::scheduler::AMD_SchedulerServer_startJob::AMD_SchedulerServer_startJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_startJob::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

void
IceAsync::scheduler::AMD_SchedulerServer_startJob::ice_exception(const ::std::exception& ex)
{
    if(const ::scheduler::JobNotExist* __ex = dynamic_cast<const ::scheduler::JobNotExist*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else if(const ::scheduler::JobNotStartable* __ex = dynamic_cast<const ::scheduler::JobNotStartable*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::scheduler::AMD_SchedulerServer_stopJob::AMD_SchedulerServer_stopJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_stopJob::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_invalidate::AMD_SchedulerServer_invalidate(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_invalidate::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_reset::AMD_SchedulerServer_reset(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_reset::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_dumpStatus::AMD_SchedulerServer_dumpStatus(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_dumpStatus::ice_response(const ::std::string& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_getJobs::AMD_SchedulerServer_getJobs(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_getJobs::ice_response(const ::scheduler::JobSeq& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_getStartableJob::AMD_SchedulerServer_getStartableJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_getStartableJob::ice_response(const ::scheduler::JobSeq& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_getJob::AMD_SchedulerServer_getJob(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_getJob::ice_response(const ::scheduler::Job& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::scheduler::AMD_SchedulerServer_getJob::ice_exception(const ::std::exception& ex)
{
    if(const ::scheduler::JobNotExist* __ex = dynamic_cast<const ::scheduler::JobNotExist*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::scheduler::AMD_SchedulerServer_addListener::AMD_SchedulerServer_addListener(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_addListener::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_addListenerWithIdent::AMD_SchedulerServer_addListenerWithIdent(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_addListenerWithIdent::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_onWorkerUpdate::AMD_SchedulerServer_onWorkerUpdate(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_onWorkerUpdate::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::scheduler::AMD_SchedulerServer_imageReady::AMD_SchedulerServer_imageReady(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::scheduler::AMD_SchedulerServer_imageReady::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}
::IceProxy::Ice::Object* ::IceProxy::scheduler::upCast(::IceProxy::scheduler::SchedulerServerListener* p) { return p; }

void
::IceProxy::scheduler::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::scheduler::SchedulerServerListener>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::scheduler::SchedulerServerListener;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::scheduler::SchedulerServerListener::onImage(const ::scheduler::Image& __p_image, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServerListener__onImage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_image);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServerListener::begin_onImage(const ::scheduler::Image& __p_image, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServerListener__onImage_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServerListener__onImage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_image);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServerListener::end_onImage(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServerListener__onImage_name);
}

void
IceProxy::scheduler::SchedulerServerListener::onUpdate(const ::scheduler::JobStateSeq& __p_jobs, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServerListener__onUpdate_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_jobs);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServerListener::begin_onUpdate(const ::scheduler::JobStateSeq& __p_jobs, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServerListener__onUpdate_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServerListener__onUpdate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_jobs);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServerListener::end_onUpdate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServerListener__onUpdate_name);
}

void
IceProxy::scheduler::SchedulerServerListener::onImageReady(const ::std::string& __p_imgId, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServerListener__onImageReady_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_imgId);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServerListener::begin_onImageReady(const ::std::string& __p_imgId, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServerListener__onImageReady_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServerListener__onImageReady_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_imgId);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServerListener::end_onImageReady(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServerListener__onImageReady_name);
}

void
IceProxy::scheduler::SchedulerServerListener::onReset(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServerListener__onReset_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServerListener::begin_onReset(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServerListener__onReset_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServerListener__onReset_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServerListener::end_onReset(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServerListener__onReset_name);
}

const ::std::string&
IceProxy::scheduler::SchedulerServerListener::ice_staticId()
{
    return ::scheduler::SchedulerServerListener::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::scheduler::SchedulerServerListener::__newInstance() const
{
    return new SchedulerServerListener;
}
::IceProxy::Ice::Object* ::IceProxy::scheduler::upCast(::IceProxy::scheduler::SchedulerServer* p) { return p; }

void
::IceProxy::scheduler::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::scheduler::SchedulerServer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::scheduler::SchedulerServer;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::scheduler::SchedulerServer::submitBatch(const ::scheduler::Batch& __p_batch, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__scheduler__SchedulerServer__submitBatch_name);
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__submitBatch_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_batch);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::scheduler::DuplicateJob&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_submitBatch(const ::scheduler::Batch& __p_batch, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__scheduler__SchedulerServer__submitBatch_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__submitBatch_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__submitBatch_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_batch);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::__begin_submitBatch(const ::scheduler::Batch& __p_batch, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::scheduler::SchedulerServerPrx __proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_submitBatch(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_submitBatch(__p_batch, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::scheduler::SchedulerServer::end_submitBatch(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __scheduler__SchedulerServer__submitBatch_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::scheduler::DuplicateJob&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::scheduler::SchedulerServer::startJob(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__scheduler__SchedulerServer__startJob_name);
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__startJob_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::scheduler::JobNotExist&)
        {
            throw;
        }
        catch(const ::scheduler::JobNotStartable&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_startJob(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__scheduler__SchedulerServer__startJob_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__startJob_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__startJob_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::__begin_startJob(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::scheduler::SchedulerServerPrx __proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_startJob(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_startJob(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::scheduler::SchedulerServer::end_startJob(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __scheduler__SchedulerServer__startJob_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::scheduler::JobNotExist&)
        {
            throw;
        }
        catch(const ::scheduler::JobNotStartable&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::scheduler::SchedulerServer::stopJob(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__stopJob_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_stopJob(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__stopJob_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__stopJob_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServer::end_stopJob(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServer__stopJob_name);
}

void
IceProxy::scheduler::SchedulerServer::invalidate(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__invalidate_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_invalidate(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__invalidate_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__invalidate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServer::end_invalidate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServer__invalidate_name);
}

void
IceProxy::scheduler::SchedulerServer::reset(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__reset_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_reset(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__reset_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__reset_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServer::end_reset(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServer__reset_name);
}

::std::string
IceProxy::scheduler::SchedulerServer::dumpStatus(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__scheduler__SchedulerServer__dumpStatus_name);
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__dumpStatus_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_dumpStatus(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__scheduler__SchedulerServer__dumpStatus_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__dumpStatus_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__dumpStatus_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::__begin_dumpStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::scheduler::SchedulerServerPrx __proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_dumpStatus(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_dumpStatus(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::scheduler::SchedulerServer::end_dumpStatus(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __scheduler__SchedulerServer__dumpStatus_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::scheduler::JobSeq
IceProxy::scheduler::SchedulerServer::getJobs(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__scheduler__SchedulerServer__getJobs_name);
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__getJobs_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::scheduler::JobSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_getJobs(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__scheduler__SchedulerServer__getJobs_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__getJobs_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__getJobs_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::__begin_getJobs(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::scheduler::JobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::scheduler::JobSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::scheduler::SchedulerServerPrx __proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(__result->getProxy());
            ::scheduler::JobSeq __ret;
            try
            {
                __ret = __proxy->end_getJobs(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::scheduler::JobSeq&)> _response;
    };
    return begin_getJobs(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::scheduler::JobSeq
IceProxy::scheduler::SchedulerServer::end_getJobs(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __scheduler__SchedulerServer__getJobs_name);
    ::scheduler::JobSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::scheduler::JobSeq
IceProxy::scheduler::SchedulerServer::getStartableJob(const ::scheduler::WorkerId& __p_worker, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__scheduler__SchedulerServer__getStartableJob_name);
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__getStartableJob_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_worker);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::scheduler::JobSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_getStartableJob(const ::scheduler::WorkerId& __p_worker, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__scheduler__SchedulerServer__getStartableJob_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__getStartableJob_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__getStartableJob_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_worker);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::__begin_getStartableJob(const ::scheduler::WorkerId& __p_worker, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::scheduler::JobSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::scheduler::JobSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::scheduler::SchedulerServerPrx __proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(__result->getProxy());
            ::scheduler::JobSeq __ret;
            try
            {
                __ret = __proxy->end_getStartableJob(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::scheduler::JobSeq&)> _response;
    };
    return begin_getStartableJob(__p_worker, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::scheduler::JobSeq
IceProxy::scheduler::SchedulerServer::end_getStartableJob(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __scheduler__SchedulerServer__getStartableJob_name);
    ::scheduler::JobSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::scheduler::Job
IceProxy::scheduler::SchedulerServer::getJob(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__scheduler__SchedulerServer__getJob_name);
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__getJob_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::scheduler::JobNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::scheduler::Job __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_getJob(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__scheduler__SchedulerServer__getJob_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__getJob_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__getJob_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::__begin_getJob(const ::scheduler::JobId& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::scheduler::Job&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::scheduler::Job&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::scheduler::SchedulerServerPrx __proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(__result->getProxy());
            ::scheduler::Job __ret;
            try
            {
                __ret = __proxy->end_getJob(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::scheduler::Job&)> _response;
    };
    return begin_getJob(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::scheduler::Job
IceProxy::scheduler::SchedulerServer::end_getJob(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __scheduler__SchedulerServer__getJob_name);
    ::scheduler::Job __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::scheduler::JobNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::scheduler::SchedulerServer::addListener(const ::scheduler::SchedulerServerListenerPrx& __p_listener, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__addListener_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_addListener(const ::scheduler::SchedulerServerListenerPrx& __p_listener, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__addListener_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__addListener_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServer::end_addListener(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServer__addListener_name);
}

void
IceProxy::scheduler::SchedulerServer::addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__addListenerWithIdent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_addListenerWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__addListenerWithIdent_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__addListenerWithIdent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServer::end_addListenerWithIdent(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServer__addListenerWithIdent_name);
}

void
IceProxy::scheduler::SchedulerServer::onWorkerUpdate(const ::scheduler::WorkerUpdate& __p_x, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__onWorkerUpdate_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_x);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_onWorkerUpdate(const ::scheduler::WorkerUpdate& __p_x, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__onWorkerUpdate_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__onWorkerUpdate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_x);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServer::end_onWorkerUpdate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServer__onWorkerUpdate_name);
}

void
IceProxy::scheduler::SchedulerServer::imageReady(const ::std::string& __p_imgId, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __scheduler__SchedulerServer__imageReady_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_imgId);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::scheduler::SchedulerServer::begin_imageReady(const ::std::string& __p_imgId, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __scheduler__SchedulerServer__imageReady_name, __del, __cookie);
    try
    {
        __result->prepare(__scheduler__SchedulerServer__imageReady_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_imgId);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::scheduler::SchedulerServer::end_imageReady(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __scheduler__SchedulerServer__imageReady_name);
}

const ::std::string&
IceProxy::scheduler::SchedulerServer::ice_staticId()
{
    return ::scheduler::SchedulerServer::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::scheduler::SchedulerServer::__newInstance() const
{
    return new SchedulerServer;
}

::Ice::Object* scheduler::upCast(::scheduler::SchedulerServerListener* p) { return p; }

namespace
{
const ::std::string __scheduler__SchedulerServerListener_ids[2] =
{
    "::Ice::Object",
    "::scheduler::SchedulerServerListener"
};

}

bool
scheduler::SchedulerServerListener::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__scheduler__SchedulerServerListener_ids, __scheduler__SchedulerServerListener_ids + 2, _s);
}

::std::vector< ::std::string>
scheduler::SchedulerServerListener::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__scheduler__SchedulerServerListener_ids[0], &__scheduler__SchedulerServerListener_ids[2]);
}

const ::std::string&
scheduler::SchedulerServerListener::ice_id(const ::Ice::Current&) const
{
    return __scheduler__SchedulerServerListener_ids[1];
}

const ::std::string&
scheduler::SchedulerServerListener::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::scheduler::SchedulerServerListener";
    return typeId;
#else
    return __scheduler__SchedulerServerListener_ids[1];
#endif
}

::Ice::DispatchStatus
scheduler::SchedulerServerListener::___onImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::Image __p_image;
    __is->read(__p_image);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServerListener_onImagePtr __cb = new IceAsync::scheduler::AMD_SchedulerServerListener_onImage(__inS);
    try
    {
        onImage_async(__cb, __p_image, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServerListener::___onUpdate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::JobStateSeq __p_jobs;
    __is->read(__p_jobs);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServerListener_onUpdatePtr __cb = new IceAsync::scheduler::AMD_SchedulerServerListener_onUpdate(__inS);
    try
    {
        onUpdate_async(__cb, __p_jobs, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServerListener::___onImageReady(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_imgId;
    __is->read(__p_imgId);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServerListener_onImageReadyPtr __cb = new IceAsync::scheduler::AMD_SchedulerServerListener_onImageReady(__inS);
    try
    {
        onImageReady_async(__cb, __p_imgId, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServerListener::___onReset(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::scheduler::AMD_SchedulerServerListener_onResetPtr __cb = new IceAsync::scheduler::AMD_SchedulerServerListener_onReset(__inS);
    try
    {
        onReset_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __scheduler__SchedulerServerListener_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "onImage",
    "onImageReady",
    "onReset",
    "onUpdate"
};

}

::Ice::DispatchStatus
scheduler::SchedulerServerListener::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__scheduler__SchedulerServerListener_all, __scheduler__SchedulerServerListener_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __scheduler__SchedulerServerListener_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___onImage(in, current);
        }
        case 5:
        {
            return ___onImageReady(in, current);
        }
        case 6:
        {
            return ___onReset(in, current);
        }
        case 7:
        {
            return ___onUpdate(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
scheduler::SchedulerServerListener::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
scheduler::SchedulerServerListener::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
scheduler::__patch(SchedulerServerListenerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::scheduler::SchedulerServerListenerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::scheduler::SchedulerServerListener::ice_staticId(), v);
    }
}

::Ice::Object* scheduler::upCast(::scheduler::SchedulerServer* p) { return p; }

namespace
{
const ::std::string __scheduler__SchedulerServer_ids[2] =
{
    "::Ice::Object",
    "::scheduler::SchedulerServer"
};

}

bool
scheduler::SchedulerServer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__scheduler__SchedulerServer_ids, __scheduler__SchedulerServer_ids + 2, _s);
}

::std::vector< ::std::string>
scheduler::SchedulerServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__scheduler__SchedulerServer_ids[0], &__scheduler__SchedulerServer_ids[2]);
}

const ::std::string&
scheduler::SchedulerServer::ice_id(const ::Ice::Current&) const
{
    return __scheduler__SchedulerServer_ids[1];
}

const ::std::string&
scheduler::SchedulerServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::scheduler::SchedulerServer";
    return typeId;
#else
    return __scheduler__SchedulerServer_ids[1];
#endif
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___submitBatch(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::Batch __p_batch;
    __is->read(__p_batch);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_submitBatchPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_submitBatch(__inS);
    try
    {
        submitBatch_async(__cb, __p_batch, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___startJob(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::JobId __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_startJobPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_startJob(__inS);
    try
    {
        startJob_async(__cb, __p_id, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___stopJob(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::JobId __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_stopJobPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_stopJob(__inS);
    try
    {
        stopJob_async(__cb, __p_id, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___invalidate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::JobId __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_invalidatePtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_invalidate(__inS);
    try
    {
        invalidate_async(__cb, __p_id, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___reset(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::scheduler::AMD_SchedulerServer_resetPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_reset(__inS);
    try
    {
        reset_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___dumpStatus(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::scheduler::AMD_SchedulerServer_dumpStatusPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_dumpStatus(__inS);
    try
    {
        dumpStatus_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___getJobs(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::scheduler::AMD_SchedulerServer_getJobsPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_getJobs(__inS);
    try
    {
        getJobs_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___getStartableJob(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::WorkerId __p_worker;
    __is->read(__p_worker);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_getStartableJobPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_getStartableJob(__inS);
    try
    {
        getStartableJob_async(__cb, __p_worker, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___getJob(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::JobId __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_getJobPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_getJob(__inS);
    try
    {
        getJob_async(__cb, __p_id, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___addListener(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::SchedulerServerListenerPrx __p_listener;
    __is->read(__p_listener);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_addListenerPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_addListener(__inS);
    try
    {
        addListener_async(__cb, __p_listener, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___addListenerWithIdent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity __p_ident;
    __is->read(__p_ident);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_addListenerWithIdentPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_addListenerWithIdent(__inS);
    try
    {
        addListenerWithIdent_async(__cb, __p_ident, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___onWorkerUpdate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::scheduler::WorkerUpdate __p_x;
    __is->read(__p_x);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_onWorkerUpdatePtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_onWorkerUpdate(__inS);
    try
    {
        onWorkerUpdate_async(__cb, __p_x, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
scheduler::SchedulerServer::___imageReady(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_imgId;
    __is->read(__p_imgId);
    __inS.endReadParams();
    ::scheduler::AMD_SchedulerServer_imageReadyPtr __cb = new IceAsync::scheduler::AMD_SchedulerServer_imageReady(__inS);
    try
    {
        imageReady_async(__cb, __p_imgId, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __scheduler__SchedulerServer_all[] =
{
    "addListener",
    "addListenerWithIdent",
    "dumpStatus",
    "getJob",
    "getJobs",
    "getStartableJob",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "imageReady",
    "invalidate",
    "onWorkerUpdate",
    "reset",
    "startJob",
    "stopJob",
    "submitBatch"
};

}

::Ice::DispatchStatus
scheduler::SchedulerServer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__scheduler__SchedulerServer_all, __scheduler__SchedulerServer_all + 17, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __scheduler__SchedulerServer_all)
    {
        case 0:
        {
            return ___addListener(in, current);
        }
        case 1:
        {
            return ___addListenerWithIdent(in, current);
        }
        case 2:
        {
            return ___dumpStatus(in, current);
        }
        case 3:
        {
            return ___getJob(in, current);
        }
        case 4:
        {
            return ___getJobs(in, current);
        }
        case 5:
        {
            return ___getStartableJob(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___imageReady(in, current);
        }
        case 11:
        {
            return ___invalidate(in, current);
        }
        case 12:
        {
            return ___onWorkerUpdate(in, current);
        }
        case 13:
        {
            return ___reset(in, current);
        }
        case 14:
        {
            return ___startJob(in, current);
        }
        case 15:
        {
            return ___stopJob(in, current);
        }
        case 16:
        {
            return ___submitBatch(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
scheduler::SchedulerServer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
scheduler::SchedulerServer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
scheduler::__patch(SchedulerServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::scheduler::SchedulerServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::scheduler::SchedulerServer::ice_staticId(), v);
    }
}
