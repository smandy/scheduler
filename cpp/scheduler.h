// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `scheduler.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __scheduler_h__
#define __scheduler_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <Ice/Identity.h>
#include <IceUtil/UndefSysMacros.h>
#include <unordered_map>
#include <vector>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace scheduler
{

class SchedulerServerListener;
class SchedulerServerListenerPrx;
class SchedulerServer;
class SchedulerServerPrx;

}

namespace scheduler
{

using StringSeq = ::std::vector<::std::string>;

using StringStringDict = ::std::map<::std::string, ::std::string>;

struct JobId
{
    ::std::string id;
    ::std::string batch;

    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, batch);
    }
};

using JobIdSeq = ::std::vector<::scheduler::JobId>;

using tmpJobId = std::unordered_map<JobId, JobId>;

using tmpJobId2 = std::unordered_map<JobId, std::vector<JobId>>;

enum class EnumJobState : unsigned char
{
    DORMANT,
    READY,
    SCHEDULED,
    STARTED,
    CANCELLING,
    CANCELLED,
    FAILED,
    COMPLETED
};

struct JobUpdate
{
    ::scheduler::JobId id;
    int pctComplete;
    ::std::string status;

    std::tuple<const ::scheduler::JobId&, const int&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, pctComplete, status);
    }
};

using JobUpdateSeq = ::std::vector<::scheduler::JobUpdate>;

struct WorkerId
{
    ::std::string id;

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(id);
    }
};

using WorkerIdSeq = ::std::vector<::scheduler::WorkerId>;

struct WorkerStateDescription
{
    ::scheduler::JobId id;
    ::scheduler::EnumJobState state;

    std::tuple<const ::scheduler::JobId&, const ::scheduler::EnumJobState&> ice_tuple() const
    {
        return std::tie(id, state);
    }
};

using WorkerStateDescriptionSeq = ::std::vector<::scheduler::WorkerStateDescription>;

struct WorkerUpdate
{
    ::scheduler::WorkerId id;
    ::scheduler::WorkerStateDescriptionSeq updates;

    std::tuple<const ::scheduler::WorkerId&, const ::scheduler::WorkerStateDescriptionSeq&> ice_tuple() const
    {
        return std::tie(id, updates);
    }
};

struct JobStateDescription
{
    ::scheduler::JobId id;
    long long int startTime;
    long long int updateTime;
    ::std::string statusMsg;
    int pctComplete;

    std::tuple<const ::scheduler::JobId&, const long long int&, const long long int&, const ::std::string&, const int&> ice_tuple() const
    {
        return std::tie(id, startTime, updateTime, statusMsg, pctComplete);
    }
};

using JobStateDescriptionSeq = ::std::vector<::scheduler::JobStateDescription>;

struct Job
{
    ::scheduler::JobId id;
    ::scheduler::JobIdSeq dependencies;
    int priority;
    ::std::string pwd;
    ::scheduler::StringSeq cmdLine;
    ::scheduler::StringStringDict env;

    std::tuple<const ::scheduler::JobId&, const ::scheduler::JobIdSeq&, const int&, const ::std::string&, const ::scheduler::StringSeq&, const ::scheduler::StringStringDict&> ice_tuple() const
    {
        return std::tie(id, dependencies, priority, pwd, cmdLine, env);
    }
};

struct JobState
{
    ::scheduler::JobId id;
    ::scheduler::EnumJobState state = ::scheduler::EnumJobState::DORMANT;
    ::scheduler::WorkerIdSeq currentWorker;
    ::scheduler::JobStateDescriptionSeq jobStatus;
    ::scheduler::WorkerStateDescriptionSeq workerStatus;

    std::tuple<const ::scheduler::JobId&, const ::scheduler::EnumJobState&, const ::scheduler::WorkerIdSeq&, const ::scheduler::JobStateDescriptionSeq&, const ::scheduler::WorkerStateDescriptionSeq&> ice_tuple() const
    {
        return std::tie(id, state, currentWorker, jobStatus, workerStatus);
    }
};

struct JobDTO
{
    ::scheduler::Job job;
    ::scheduler::JobState state;

    std::tuple<const ::scheduler::Job&, const ::scheduler::JobState&> ice_tuple() const
    {
        return std::tie(job, state);
    }
};

using JobDTOSeq = ::std::vector<::scheduler::JobDTO>;

class DuplicateJob : public ::Ice::UserExceptionHelper<DuplicateJob, ::Ice::UserException>
{
public:

    virtual ~DuplicateJob();

    DuplicateJob(const DuplicateJob&) = default;

    DuplicateJob() = default;

    DuplicateJob(const ::scheduler::JobIdSeq& iceP_id) :
        id(::std::move(iceP_id))
    {
    }

    std::tuple<const ::scheduler::JobIdSeq&> ice_tuple() const
    {
        return std::tie(id);
    }

    static const ::std::string& ice_staticId();

    ::scheduler::JobIdSeq id;
};

static DuplicateJob _iceS_DuplicateJob_init;

class JobCycleDetected : public ::Ice::UserExceptionHelper<JobCycleDetected, ::Ice::UserException>
{
public:

    virtual ~JobCycleDetected();

    JobCycleDetected(const JobCycleDetected&) = default;

    JobCycleDetected() = default;

    JobCycleDetected(const ::scheduler::JobIdSeq& iceP_badNodes) :
        badNodes(::std::move(iceP_badNodes))
    {
    }

    std::tuple<const ::scheduler::JobIdSeq&> ice_tuple() const
    {
        return std::tie(badNodes);
    }

    static const ::std::string& ice_staticId();

    ::scheduler::JobIdSeq badNodes;
};

class JobNotExist : public ::Ice::UserExceptionHelper<JobNotExist, ::Ice::UserException>
{
public:

    virtual ~JobNotExist();

    JobNotExist(const JobNotExist&) = default;

    JobNotExist() = default;

    JobNotExist(const ::scheduler::JobIdSeq& iceP_id) :
        id(::std::move(iceP_id))
    {
    }

    std::tuple<const ::scheduler::JobIdSeq&> ice_tuple() const
    {
        return std::tie(id);
    }

    static const ::std::string& ice_staticId();

    ::scheduler::JobIdSeq id;
};

class JobNotStartable : public ::Ice::UserExceptionHelper<JobNotStartable, ::Ice::UserException>
{
public:

    virtual ~JobNotStartable();

    JobNotStartable(const JobNotStartable&) = default;

    JobNotStartable() = default;

    JobNotStartable(const ::scheduler::JobId& iceP_id) :
        id(::std::move(iceP_id))
    {
    }

    std::tuple<const ::scheduler::JobId&> ice_tuple() const
    {
        return std::tie(id);
    }

    static const ::std::string& ice_staticId();

    ::scheduler::JobId id;
};

using JobSeq = ::std::vector<::scheduler::Job>;

using JobStateSeq = ::std::vector<::scheduler::JobState>;

using JobDict = ::std::map<::std::string, ::scheduler::Job>;

struct Batch
{
    ::scheduler::JobSeq jobs;

    std::tuple<const ::scheduler::JobSeq&> ice_tuple() const
    {
        return std::tie(jobs);
    }
};

struct Image
{
    ::scheduler::JobDTOSeq jobs;
    ::std::string currentImage;

    std::tuple<const ::scheduler::JobDTOSeq&, const ::std::string&> ice_tuple() const
    {
        return std::tie(jobs, currentImage);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace scheduler
{

class SchedulerServerListener : public virtual ::Ice::Object
{
public:

    using ProxyType = SchedulerServerListenerPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void onImageAsync(::scheduler::Image, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_onImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onUpdateAsync(::scheduler::JobDTOSeq, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_onUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onImageReadyAsync(::std::string, ::std::string, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_onImageReady(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onResetAsync(::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_onReset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class SchedulerServer : public virtual ::Ice::Object
{
public:

    using ProxyType = SchedulerServerPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void submitBatchAsync(::scheduler::Batch, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_submitBatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void startJobAsync(::scheduler::JobId, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_startJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopJobAsync(::scheduler::JobId, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_stopJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void invalidateJobAsync(::scheduler::JobId, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_invalidateJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resetAsync(::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_reset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void dumpStatusAsync(::std::function<void(const ::std::string&)>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_dumpStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getJobsAsync(::std::function<void(const ::scheduler::JobDTOSeq&)>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_getJobs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getStartableJobAsync(::scheduler::WorkerId, ::std::function<void(const ::scheduler::JobSeq&)>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_getStartableJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getJobAsync(::scheduler::JobId, ::std::function<void(const ::scheduler::JobDTO&)>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_getJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addListenerAsync(::std::shared_ptr<::scheduler::SchedulerServerListenerPrx>, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_addListener(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addListenerWithIdentAsync(::Ice::Identity, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_addListenerWithIdent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onWorkerUpdateAsync(::scheduler::WorkerUpdate, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_onWorkerUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void imageReadyAsync(::std::string, ::std::string, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_imageReady(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStateAsync(::scheduler::JobId, ::scheduler::EnumJobState, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_setState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getImageAsync(::std::function<void(const ::scheduler::Image&)>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_getImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace scheduler
{

class SchedulerServerListenerPrx : public virtual ::Ice::Proxy<SchedulerServerListenerPrx, ::Ice::ObjectPrx>
{
public:

    void onImage(const ::scheduler::Image& iceP_image, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerListenerPrx::_iceI_onImage, iceP_image, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onImageAsync(const ::scheduler::Image& iceP_image, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerListenerPrx::_iceI_onImage, iceP_image, context);
    }

    ::std::function<void()>
    onImageAsync(const ::scheduler::Image& iceP_image,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerListenerPrx::_iceI_onImage, iceP_image, context);
    }

    void _iceI_onImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::scheduler::Image&, const ::Ice::Context&);

    void onUpdate(const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerListenerPrx::_iceI_onUpdate, iceP_jobs, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onUpdateAsync(const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerListenerPrx::_iceI_onUpdate, iceP_jobs, context);
    }

    ::std::function<void()>
    onUpdateAsync(const ::scheduler::JobDTOSeq& iceP_jobs,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerListenerPrx::_iceI_onUpdate, iceP_jobs, context);
    }

    void _iceI_onUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::scheduler::JobDTOSeq&, const ::Ice::Context&);

    void onImageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerListenerPrx::_iceI_onImageReady, iceP_batchId, iceP_imgId, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onImageReadyAsync(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerListenerPrx::_iceI_onImageReady, iceP_batchId, iceP_imgId, context);
    }

    ::std::function<void()>
    onImageReadyAsync(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerListenerPrx::_iceI_onImageReady, iceP_batchId, iceP_imgId, context);
    }

    void _iceI_onImageReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void onReset(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerListenerPrx::_iceI_onReset, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onResetAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerListenerPrx::_iceI_onReset, context);
    }

    ::std::function<void()>
    onResetAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerListenerPrx::_iceI_onReset, context);
    }

    void _iceI_onReset(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    SchedulerServerListenerPrx() = default;
    friend ::std::shared_ptr<SchedulerServerListenerPrx> IceInternal::createProxy<SchedulerServerListenerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class SchedulerServerPrx : public virtual ::Ice::Proxy<SchedulerServerPrx, ::Ice::ObjectPrx>
{
public:

    void submitBatch(const ::scheduler::Batch& iceP_batch, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_submitBatch, iceP_batch, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto submitBatchAsync(const ::scheduler::Batch& iceP_batch, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_submitBatch, iceP_batch, context);
    }

    ::std::function<void()>
    submitBatchAsync(const ::scheduler::Batch& iceP_batch,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_submitBatch, iceP_batch, context);
    }

    void _iceI_submitBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::scheduler::Batch&, const ::Ice::Context&);

    void startJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_startJob, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto startJobAsync(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_startJob, iceP_id, context);
    }

    ::std::function<void()>
    startJobAsync(const ::scheduler::JobId& iceP_id,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_startJob, iceP_id, context);
    }

    void _iceI_startJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::scheduler::JobId&, const ::Ice::Context&);

    void stopJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_stopJob, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopJobAsync(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_stopJob, iceP_id, context);
    }

    ::std::function<void()>
    stopJobAsync(const ::scheduler::JobId& iceP_id,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_stopJob, iceP_id, context);
    }

    void _iceI_stopJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::scheduler::JobId&, const ::Ice::Context&);

    void invalidateJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_invalidateJob, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto invalidateJobAsync(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_invalidateJob, iceP_id, context);
    }

    ::std::function<void()>
    invalidateJobAsync(const ::scheduler::JobId& iceP_id,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_invalidateJob, iceP_id, context);
    }

    void _iceI_invalidateJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::scheduler::JobId&, const ::Ice::Context&);

    void reset(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_reset, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resetAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_reset, context);
    }

    ::std::function<void()>
    resetAsync(::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_reset, context);
    }

    void _iceI_reset(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    ::std::string dumpStatus(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &scheduler::SchedulerServerPrx::_iceI_dumpStatus, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto dumpStatusAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_dumpStatus, context);
    }

    ::std::function<void()>
    dumpStatusAsync(::std::function<void(::std::string)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_dumpStatus, context);
    }

    void _iceI_dumpStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);

    ::scheduler::JobDTOSeq getJobs(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::scheduler::JobDTOSeq>(true, this, &scheduler::SchedulerServerPrx::_iceI_getJobs, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getJobsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::scheduler::JobDTOSeq>>().get_future())
    {
        return _makePromiseOutgoing<::scheduler::JobDTOSeq, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_getJobs, context);
    }

    ::std::function<void()>
    getJobsAsync(::std::function<void(::scheduler::JobDTOSeq)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::scheduler::JobDTOSeq>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_getJobs, context);
    }

    void _iceI_getJobs(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::scheduler::JobDTOSeq>>&, const ::Ice::Context&);

    ::scheduler::JobSeq getStartableJob(const ::scheduler::WorkerId& iceP_worker, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::scheduler::JobSeq>(true, this, &scheduler::SchedulerServerPrx::_iceI_getStartableJob, iceP_worker, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getStartableJobAsync(const ::scheduler::WorkerId& iceP_worker, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::scheduler::JobSeq>>().get_future())
    {
        return _makePromiseOutgoing<::scheduler::JobSeq, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_getStartableJob, iceP_worker, context);
    }

    ::std::function<void()>
    getStartableJobAsync(const ::scheduler::WorkerId& iceP_worker,
                         ::std::function<void(::scheduler::JobSeq)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::scheduler::JobSeq>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_getStartableJob, iceP_worker, context);
    }

    void _iceI_getStartableJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::scheduler::JobSeq>>&, const ::scheduler::WorkerId&, const ::Ice::Context&);

    ::scheduler::JobDTO getJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::scheduler::JobDTO>(true, this, &scheduler::SchedulerServerPrx::_iceI_getJob, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getJobAsync(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::scheduler::JobDTO>>().get_future())
    {
        return _makePromiseOutgoing<::scheduler::JobDTO, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_getJob, iceP_id, context);
    }

    ::std::function<void()>
    getJobAsync(const ::scheduler::JobId& iceP_id,
                ::std::function<void(::scheduler::JobDTO)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::scheduler::JobDTO>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_getJob, iceP_id, context);
    }

    void _iceI_getJob(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::scheduler::JobDTO>>&, const ::scheduler::JobId&, const ::Ice::Context&);

    void addListener(const ::std::shared_ptr<::scheduler::SchedulerServerListenerPrx>& iceP_listener, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_addListener, iceP_listener, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addListenerAsync(const ::std::shared_ptr<::scheduler::SchedulerServerListenerPrx>& iceP_listener, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_addListener, iceP_listener, context);
    }

    ::std::function<void()>
    addListenerAsync(const ::std::shared_ptr<::scheduler::SchedulerServerListenerPrx>& iceP_listener,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_addListener, iceP_listener, context);
    }

    void _iceI_addListener(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<::scheduler::SchedulerServerListenerPrx>&, const ::Ice::Context&);

    void addListenerWithIdent(const ::Ice::Identity& iceP_ident, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_addListenerWithIdent, iceP_ident, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addListenerWithIdentAsync(const ::Ice::Identity& iceP_ident, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_addListenerWithIdent, iceP_ident, context);
    }

    ::std::function<void()>
    addListenerWithIdentAsync(const ::Ice::Identity& iceP_ident,
                              ::std::function<void()> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_addListenerWithIdent, iceP_ident, context);
    }

    void _iceI_addListenerWithIdent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Identity&, const ::Ice::Context&);

    void onWorkerUpdate(const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_onWorkerUpdate, iceP_x, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onWorkerUpdateAsync(const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_onWorkerUpdate, iceP_x, context);
    }

    ::std::function<void()>
    onWorkerUpdateAsync(const ::scheduler::WorkerUpdate& iceP_x,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_onWorkerUpdate, iceP_x, context);
    }

    void _iceI_onWorkerUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::scheduler::WorkerUpdate&, const ::Ice::Context&);

    void imageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_imageReady, iceP_batchId, iceP_imgId, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto imageReadyAsync(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_imageReady, iceP_batchId, iceP_imgId, context);
    }

    ::std::function<void()>
    imageReadyAsync(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_imageReady, iceP_batchId, iceP_imgId, context);
    }

    void _iceI_imageReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void setState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &scheduler::SchedulerServerPrx::_iceI_setState, iceP_id, iceP_state, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setStateAsync(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_setState, iceP_id, iceP_state, context);
    }

    ::std::function<void()>
    setStateAsync(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_setState, iceP_id, iceP_state, context);
    }

    void _iceI_setState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::scheduler::JobId&, ::scheduler::EnumJobState, const ::Ice::Context&);

    ::scheduler::Image getImage(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::scheduler::Image>(true, this, &scheduler::SchedulerServerPrx::_iceI_getImage, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getImageAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::scheduler::Image>>().get_future())
    {
        return _makePromiseOutgoing<::scheduler::Image, P>(false, this, &scheduler::SchedulerServerPrx::_iceI_getImage, context);
    }

    ::std::function<void()>
    getImageAsync(::std::function<void(::scheduler::Image)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::scheduler::Image>(response, ex, sent, this, &scheduler::SchedulerServerPrx::_iceI_getImage, context);
    }

    void _iceI_getImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::scheduler::Image>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    SchedulerServerPrx() = default;
    friend ::std::shared_ptr<SchedulerServerPrx> IceInternal::createProxy<SchedulerServerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::scheduler::JobId>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::JobId, S>
{
    static void read(S* istr, ::scheduler::JobId& v)
    {
        istr->readAll(v.id, v.batch);
    }
};

template<>
struct StreamableTraits< ::scheduler::EnumJobState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 7;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::scheduler::JobUpdate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::JobUpdate, S>
{
    static void read(S* istr, ::scheduler::JobUpdate& v)
    {
        istr->readAll(v.id, v.pctComplete, v.status);
    }
};

template<>
struct StreamableTraits<::scheduler::WorkerId>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::WorkerId, S>
{
    static void read(S* istr, ::scheduler::WorkerId& v)
    {
        istr->readAll(v.id);
    }
};

template<>
struct StreamableTraits<::scheduler::WorkerStateDescription>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::WorkerStateDescription, S>
{
    static void read(S* istr, ::scheduler::WorkerStateDescription& v)
    {
        istr->readAll(v.id, v.state);
    }
};

template<>
struct StreamableTraits<::scheduler::WorkerUpdate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::WorkerUpdate, S>
{
    static void read(S* istr, ::scheduler::WorkerUpdate& v)
    {
        istr->readAll(v.id, v.updates);
    }
};

template<>
struct StreamableTraits<::scheduler::JobStateDescription>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 23;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::JobStateDescription, S>
{
    static void read(S* istr, ::scheduler::JobStateDescription& v)
    {
        istr->readAll(v.id, v.startTime, v.updateTime, v.statusMsg, v.pctComplete);
    }
};

template<>
struct StreamableTraits<::scheduler::Job>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::Job, S>
{
    static void read(S* istr, ::scheduler::Job& v)
    {
        istr->readAll(v.id, v.dependencies, v.priority, v.pwd, v.cmdLine, v.env);
    }
};

template<>
struct StreamableTraits<::scheduler::JobState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::JobState, S>
{
    static void read(S* istr, ::scheduler::JobState& v)
    {
        istr->readAll(v.id, v.state, v.currentWorker, v.jobStatus, v.workerStatus);
    }
};

template<>
struct StreamableTraits<::scheduler::JobDTO>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::JobDTO, S>
{
    static void read(S* istr, ::scheduler::JobDTO& v)
    {
        istr->readAll(v.job, v.state);
    }
};

template<typename S>
struct StreamReader<::scheduler::DuplicateJob, S>
{
    static void read(S* istr, ::scheduler::DuplicateJob& v)
    {
        istr->readAll(v.id);
    }
};

template<typename S>
struct StreamReader<::scheduler::JobCycleDetected, S>
{
    static void read(S* istr, ::scheduler::JobCycleDetected& v)
    {
        istr->readAll(v.badNodes);
    }
};

template<typename S>
struct StreamReader<::scheduler::JobNotExist, S>
{
    static void read(S* istr, ::scheduler::JobNotExist& v)
    {
        istr->readAll(v.id);
    }
};

template<typename S>
struct StreamReader<::scheduler::JobNotStartable, S>
{
    static void read(S* istr, ::scheduler::JobNotStartable& v)
    {
        istr->readAll(v.id);
    }
};

template<>
struct StreamableTraits<::scheduler::Batch>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::Batch, S>
{
    static void read(S* istr, ::scheduler::Batch& v)
    {
        istr->readAll(v.jobs);
    }
};

template<>
struct StreamableTraits<::scheduler::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::scheduler::Image, S>
{
    static void read(S* istr, ::scheduler::Image& v)
    {
        istr->readAll(v.jobs, v.currentImage);
    }
};

}

namespace scheduler
{

using SchedulerServerListenerPtr = ::std::shared_ptr<SchedulerServerListener>;
using SchedulerServerListenerPrxPtr = ::std::shared_ptr<SchedulerServerListenerPrx>;

using SchedulerServerPtr = ::std::shared_ptr<SchedulerServer>;
using SchedulerServerPrxPtr = ::std::shared_ptr<SchedulerServerPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace scheduler
{

class SchedulerServerListener;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::scheduler::SchedulerServerListener>&);
::IceProxy::Ice::Object* upCast(::IceProxy::scheduler::SchedulerServerListener*);

class SchedulerServer;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::scheduler::SchedulerServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::scheduler::SchedulerServer*);

}

}

namespace scheduler
{

class SchedulerServerListener;
::Ice::Object* upCast(::scheduler::SchedulerServerListener*);
typedef ::IceInternal::Handle< ::scheduler::SchedulerServerListener> SchedulerServerListenerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::scheduler::SchedulerServerListener> SchedulerServerListenerPrx;
typedef SchedulerServerListenerPrx SchedulerServerListenerPrxPtr;
void _icePatchObjectPtr(SchedulerServerListenerPtr&, const ::Ice::ObjectPtr&);

class SchedulerServer;
::Ice::Object* upCast(::scheduler::SchedulerServer*);
typedef ::IceInternal::Handle< ::scheduler::SchedulerServer> SchedulerServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::scheduler::SchedulerServer> SchedulerServerPrx;
typedef SchedulerServerPrx SchedulerServerPrxPtr;
void _icePatchObjectPtr(SchedulerServerPtr&, const ::Ice::ObjectPtr&);

}

namespace scheduler
{

typedef ::std::vector< ::std::string> StringSeq;

typedef ::std::map< ::std::string, ::std::string> StringStringDict;

struct JobId
{
    ::std::string id;
    ::std::string batch;

    bool operator==(const JobId& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(batch != rhs_.batch)
        {
            return false;
        }
        return true;
    }

    bool operator<(const JobId& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(batch < rhs_.batch)
        {
            return true;
        }
        else if(rhs_.batch < batch)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const JobId& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const JobId& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const JobId& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const JobId& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::scheduler::JobId> JobIdSeq;

typedef std::unordered_map<JobId, JobId> tmpJobId;

typedef std::unordered_map<JobId, std::vector<JobId>> tmpJobId2;

enum EnumJobState
{
    DORMANT,
    READY,
    SCHEDULED,
    STARTED,
    CANCELLING,
    CANCELLED,
    FAILED,
    COMPLETED
};

struct JobUpdate
{
    ::scheduler::JobId id;
    ::Ice::Int pctComplete;
    ::std::string status;

    bool operator==(const JobUpdate& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(pctComplete != rhs_.pctComplete)
        {
            return false;
        }
        if(status != rhs_.status)
        {
            return false;
        }
        return true;
    }

    bool operator<(const JobUpdate& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(pctComplete < rhs_.pctComplete)
        {
            return true;
        }
        else if(rhs_.pctComplete < pctComplete)
        {
            return false;
        }
        if(status < rhs_.status)
        {
            return true;
        }
        else if(rhs_.status < status)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const JobUpdate& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const JobUpdate& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const JobUpdate& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const JobUpdate& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::scheduler::JobUpdate> JobUpdateSeq;

struct WorkerId
{
    ::std::string id;

    bool operator==(const WorkerId& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WorkerId& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WorkerId& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const WorkerId& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const WorkerId& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const WorkerId& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::scheduler::WorkerId> WorkerIdSeq;

struct WorkerStateDescription
{
    ::scheduler::JobId id;
    ::scheduler::EnumJobState state;

    bool operator==(const WorkerStateDescription& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(state != rhs_.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WorkerStateDescription& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(state < rhs_.state)
        {
            return true;
        }
        else if(rhs_.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WorkerStateDescription& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const WorkerStateDescription& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const WorkerStateDescription& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const WorkerStateDescription& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::scheduler::WorkerStateDescription> WorkerStateDescriptionSeq;

struct WorkerUpdate
{
    ::scheduler::WorkerId id;
    ::scheduler::WorkerStateDescriptionSeq updates;
};

struct JobStateDescription
{
    ::scheduler::JobId id;
    ::Ice::Long startTime;
    ::Ice::Long updateTime;
    ::std::string statusMsg;
    ::Ice::Int pctComplete;

    bool operator==(const JobStateDescription& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(startTime != rhs_.startTime)
        {
            return false;
        }
        if(updateTime != rhs_.updateTime)
        {
            return false;
        }
        if(statusMsg != rhs_.statusMsg)
        {
            return false;
        }
        if(pctComplete != rhs_.pctComplete)
        {
            return false;
        }
        return true;
    }

    bool operator<(const JobStateDescription& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(startTime < rhs_.startTime)
        {
            return true;
        }
        else if(rhs_.startTime < startTime)
        {
            return false;
        }
        if(updateTime < rhs_.updateTime)
        {
            return true;
        }
        else if(rhs_.updateTime < updateTime)
        {
            return false;
        }
        if(statusMsg < rhs_.statusMsg)
        {
            return true;
        }
        else if(rhs_.statusMsg < statusMsg)
        {
            return false;
        }
        if(pctComplete < rhs_.pctComplete)
        {
            return true;
        }
        else if(rhs_.pctComplete < pctComplete)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const JobStateDescription& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const JobStateDescription& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const JobStateDescription& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const JobStateDescription& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::scheduler::JobStateDescription> JobStateDescriptionSeq;

struct Job
{
    ::scheduler::JobId id;
    ::scheduler::JobIdSeq dependencies;
    ::Ice::Int priority;
    ::std::string pwd;
    ::scheduler::StringSeq cmdLine;
    ::scheduler::StringStringDict env;
};

struct JobState
{
    JobState() :
        state(::scheduler::DORMANT)
    {
    }
    
    JobState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::scheduler::WorkerIdSeq& iceP_currentWorker, const ::scheduler::JobStateDescriptionSeq& iceP_jobStatus, const ::scheduler::WorkerStateDescriptionSeq& iceP_workerStatus) :
        id(iceP_id),
        state(iceP_state),
        currentWorker(iceP_currentWorker),
        jobStatus(iceP_jobStatus),
        workerStatus(iceP_workerStatus)
    {
    }
    

    ::scheduler::JobId id;
    ::scheduler::EnumJobState state;
    ::scheduler::WorkerIdSeq currentWorker;
    ::scheduler::JobStateDescriptionSeq jobStatus;
    ::scheduler::WorkerStateDescriptionSeq workerStatus;
};

struct JobDTO
{
    ::scheduler::Job job;
    ::scheduler::JobState state;
};

typedef ::std::vector< ::scheduler::JobDTO> JobDTOSeq;

class DuplicateJob : public ::Ice::UserException
{
public:

    DuplicateJob() {}
    explicit DuplicateJob(const ::scheduler::JobIdSeq&);
    virtual ~DuplicateJob() throw();

    virtual ::std::string ice_id() const;
    virtual DuplicateJob* ice_clone() const;
    virtual void ice_throw() const;

    ::scheduler::JobIdSeq id;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static DuplicateJob _iceS_DuplicateJob_init;

class JobCycleDetected : public ::Ice::UserException
{
public:

    JobCycleDetected() {}
    explicit JobCycleDetected(const ::scheduler::JobIdSeq&);
    virtual ~JobCycleDetected() throw();

    virtual ::std::string ice_id() const;
    virtual JobCycleDetected* ice_clone() const;
    virtual void ice_throw() const;

    ::scheduler::JobIdSeq badNodes;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

class JobNotExist : public ::Ice::UserException
{
public:

    JobNotExist() {}
    explicit JobNotExist(const ::scheduler::JobIdSeq&);
    virtual ~JobNotExist() throw();

    virtual ::std::string ice_id() const;
    virtual JobNotExist* ice_clone() const;
    virtual void ice_throw() const;

    ::scheduler::JobIdSeq id;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

class JobNotStartable : public ::Ice::UserException
{
public:

    JobNotStartable() {}
    explicit JobNotStartable(const ::scheduler::JobId&);
    virtual ~JobNotStartable() throw();

    virtual ::std::string ice_id() const;
    virtual JobNotStartable* ice_clone() const;
    virtual void ice_throw() const;

    ::scheduler::JobId id;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

typedef ::std::vector< ::scheduler::Job> JobSeq;

typedef ::std::vector< ::scheduler::JobState> JobStateSeq;

typedef ::std::map< ::std::string, ::scheduler::Job> JobDict;

struct Batch
{
    ::scheduler::JobSeq jobs;
};

struct Image
{
    ::scheduler::JobDTOSeq jobs;
    ::std::string currentImage;
};

}

namespace scheduler
{

class AMD_SchedulerServerListener_onImage : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServerListener_onImage();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServerListener_onImage> AMD_SchedulerServerListener_onImagePtr;

class AMD_SchedulerServerListener_onUpdate : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServerListener_onUpdate();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServerListener_onUpdate> AMD_SchedulerServerListener_onUpdatePtr;

class AMD_SchedulerServerListener_onImageReady : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServerListener_onImageReady();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServerListener_onImageReady> AMD_SchedulerServerListener_onImageReadyPtr;

class AMD_SchedulerServerListener_onReset : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServerListener_onReset();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServerListener_onReset> AMD_SchedulerServerListener_onResetPtr;

class AMD_SchedulerServer_submitBatch : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_submitBatch();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_submitBatch> AMD_SchedulerServer_submitBatchPtr;

class AMD_SchedulerServer_startJob : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_startJob();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_startJob> AMD_SchedulerServer_startJobPtr;

class AMD_SchedulerServer_stopJob : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_stopJob();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_stopJob> AMD_SchedulerServer_stopJobPtr;

class AMD_SchedulerServer_invalidateJob : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_invalidateJob();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_invalidateJob> AMD_SchedulerServer_invalidateJobPtr;

class AMD_SchedulerServer_reset : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_reset();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_reset> AMD_SchedulerServer_resetPtr;

class AMD_SchedulerServer_dumpStatus : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_dumpStatus();

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_dumpStatus> AMD_SchedulerServer_dumpStatusPtr;

class AMD_SchedulerServer_getJobs : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_getJobs();

    virtual void ice_response(const ::scheduler::JobDTOSeq&) = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_getJobs> AMD_SchedulerServer_getJobsPtr;

class AMD_SchedulerServer_getStartableJob : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_getStartableJob();

    virtual void ice_response(const ::scheduler::JobSeq&) = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_getStartableJob> AMD_SchedulerServer_getStartableJobPtr;

class AMD_SchedulerServer_getJob : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_getJob();

    virtual void ice_response(const ::scheduler::JobDTO&) = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_getJob> AMD_SchedulerServer_getJobPtr;

class AMD_SchedulerServer_addListener : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_addListener();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_addListener> AMD_SchedulerServer_addListenerPtr;

class AMD_SchedulerServer_addListenerWithIdent : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_addListenerWithIdent();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_addListenerWithIdent> AMD_SchedulerServer_addListenerWithIdentPtr;

class AMD_SchedulerServer_onWorkerUpdate : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_onWorkerUpdate();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_onWorkerUpdate> AMD_SchedulerServer_onWorkerUpdatePtr;

class AMD_SchedulerServer_imageReady : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_imageReady();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_imageReady> AMD_SchedulerServer_imageReadyPtr;

class AMD_SchedulerServer_setState : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_setState();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_setState> AMD_SchedulerServer_setStatePtr;

class AMD_SchedulerServer_getImage : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_SchedulerServer_getImage();

    virtual void ice_response(const ::scheduler::Image&) = 0;
};

typedef ::IceUtil::Handle< ::scheduler::AMD_SchedulerServer_getImage> AMD_SchedulerServer_getImagePtr;

}

namespace IceAsync
{

namespace scheduler
{

class AMD_SchedulerServerListener_onImage : public ::scheduler::AMD_SchedulerServerListener_onImage, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServerListener_onImage(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServerListener_onUpdate : public ::scheduler::AMD_SchedulerServerListener_onUpdate, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServerListener_onUpdate(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServerListener_onImageReady : public ::scheduler::AMD_SchedulerServerListener_onImageReady, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServerListener_onImageReady(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServerListener_onReset : public ::scheduler::AMD_SchedulerServerListener_onReset, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServerListener_onReset(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_submitBatch : public ::scheduler::AMD_SchedulerServer_submitBatch, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_submitBatch(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_startJob : public ::scheduler::AMD_SchedulerServer_startJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_startJob(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_stopJob : public ::scheduler::AMD_SchedulerServer_stopJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_stopJob(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_invalidateJob : public ::scheduler::AMD_SchedulerServer_invalidateJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_invalidateJob(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_reset : public ::scheduler::AMD_SchedulerServer_reset, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_reset(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_dumpStatus : public ::scheduler::AMD_SchedulerServer_dumpStatus, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_dumpStatus(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
};

class AMD_SchedulerServer_getJobs : public ::scheduler::AMD_SchedulerServer_getJobs, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_getJobs(::IceInternal::Incoming&);

    virtual void ice_response(const ::scheduler::JobDTOSeq&);
};

class AMD_SchedulerServer_getStartableJob : public ::scheduler::AMD_SchedulerServer_getStartableJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_getStartableJob(::IceInternal::Incoming&);

    virtual void ice_response(const ::scheduler::JobSeq&);
};

class AMD_SchedulerServer_getJob : public ::scheduler::AMD_SchedulerServer_getJob, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_getJob(::IceInternal::Incoming&);

    virtual void ice_response(const ::scheduler::JobDTO&);
};

class AMD_SchedulerServer_addListener : public ::scheduler::AMD_SchedulerServer_addListener, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_addListener(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_addListenerWithIdent : public ::scheduler::AMD_SchedulerServer_addListenerWithIdent, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_addListenerWithIdent(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_onWorkerUpdate : public ::scheduler::AMD_SchedulerServer_onWorkerUpdate, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_onWorkerUpdate(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_imageReady : public ::scheduler::AMD_SchedulerServer_imageReady, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_imageReady(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_setState : public ::scheduler::AMD_SchedulerServer_setState, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_setState(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SchedulerServer_getImage : public ::scheduler::AMD_SchedulerServer_getImage, public ::IceInternal::IncomingAsync
{
public:

    AMD_SchedulerServer_getImage(::IceInternal::Incoming&);

    virtual void ice_response(const ::scheduler::Image&);
};

}

}

namespace scheduler
{

class Callback_SchedulerServerListener_onImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServerListener_onImage_Base> Callback_SchedulerServerListener_onImagePtr;

class Callback_SchedulerServerListener_onUpdate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServerListener_onUpdate_Base> Callback_SchedulerServerListener_onUpdatePtr;

class Callback_SchedulerServerListener_onImageReady_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServerListener_onImageReady_Base> Callback_SchedulerServerListener_onImageReadyPtr;

class Callback_SchedulerServerListener_onReset_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServerListener_onReset_Base> Callback_SchedulerServerListener_onResetPtr;

class Callback_SchedulerServer_submitBatch_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_submitBatch_Base> Callback_SchedulerServer_submitBatchPtr;

class Callback_SchedulerServer_startJob_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_startJob_Base> Callback_SchedulerServer_startJobPtr;

class Callback_SchedulerServer_stopJob_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_stopJob_Base> Callback_SchedulerServer_stopJobPtr;

class Callback_SchedulerServer_invalidateJob_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_invalidateJob_Base> Callback_SchedulerServer_invalidateJobPtr;

class Callback_SchedulerServer_reset_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_reset_Base> Callback_SchedulerServer_resetPtr;

class Callback_SchedulerServer_dumpStatus_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_dumpStatus_Base> Callback_SchedulerServer_dumpStatusPtr;

class Callback_SchedulerServer_getJobs_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_getJobs_Base> Callback_SchedulerServer_getJobsPtr;

class Callback_SchedulerServer_getStartableJob_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_getStartableJob_Base> Callback_SchedulerServer_getStartableJobPtr;

class Callback_SchedulerServer_getJob_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_getJob_Base> Callback_SchedulerServer_getJobPtr;

class Callback_SchedulerServer_addListener_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_addListener_Base> Callback_SchedulerServer_addListenerPtr;

class Callback_SchedulerServer_addListenerWithIdent_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_addListenerWithIdent_Base> Callback_SchedulerServer_addListenerWithIdentPtr;

class Callback_SchedulerServer_onWorkerUpdate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_onWorkerUpdate_Base> Callback_SchedulerServer_onWorkerUpdatePtr;

class Callback_SchedulerServer_imageReady_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_imageReady_Base> Callback_SchedulerServer_imageReadyPtr;

class Callback_SchedulerServer_setState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_setState_Base> Callback_SchedulerServer_setStatePtr;

class Callback_SchedulerServer_getImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedulerServer_getImage_Base> Callback_SchedulerServer_getImagePtr;

}

namespace IceProxy
{

namespace scheduler
{

class SchedulerServerListener : public virtual ::Ice::Proxy<SchedulerServerListener, ::IceProxy::Ice::Object>
{
public:

    void onImage(const ::scheduler::Image& iceP_image, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onImage(_iceI_begin_onImage(iceP_image, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::scheduler::Image& iceP_image, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onImage(iceP_image, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::scheduler::Image& iceP_image, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImage(iceP_image, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::scheduler::Image& iceP_image, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImage(iceP_image, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::scheduler::Image& iceP_image, const ::scheduler::Callback_SchedulerServerListener_onImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImage(iceP_image, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::scheduler::Image& iceP_image, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServerListener_onImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImage(iceP_image, context, del, cookie);
    }

    void end_onImage(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onImage(const ::scheduler::Image&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void onUpdate(const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onUpdate(_iceI_begin_onUpdate(iceP_jobs, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onUpdate(iceP_jobs, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onUpdate(iceP_jobs, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onUpdate(iceP_jobs, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::scheduler::JobDTOSeq& iceP_jobs, const ::scheduler::Callback_SchedulerServerListener_onUpdatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onUpdate(iceP_jobs, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::scheduler::JobDTOSeq& iceP_jobs, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServerListener_onUpdatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onUpdate(iceP_jobs, context, del, cookie);
    }

    void end_onUpdate(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onUpdate(const ::scheduler::JobDTOSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void onImageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onImageReady(_iceI_begin_onImageReady(iceP_batchId, iceP_imgId, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onImageReady(iceP_batchId, iceP_imgId, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImageReady(iceP_batchId, iceP_imgId, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImageReady(iceP_batchId, iceP_imgId, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::scheduler::Callback_SchedulerServerListener_onImageReadyPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImageReady(iceP_batchId, iceP_imgId, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServerListener_onImageReadyPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImageReady(iceP_batchId, iceP_imgId, context, del, cookie);
    }

    void end_onImageReady(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onImageReady(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void onReset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onReset(_iceI_begin_onReset(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onReset(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onReset(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onReset(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::scheduler::Callback_SchedulerServerListener_onResetPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onReset(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onReset(const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServerListener_onResetPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onReset(context, del, cookie);
    }

    void end_onReset(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onReset(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class SchedulerServer : public virtual ::Ice::Proxy<SchedulerServer, ::IceProxy::Ice::Object>
{
public:

    void submitBatch(const ::scheduler::Batch& iceP_batch, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_submitBatch(_iceI_begin_submitBatch(iceP_batch, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::scheduler::Batch& iceP_batch, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_submitBatch(iceP_batch, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::scheduler::Batch& iceP_batch, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_submitBatch(iceP_batch, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::scheduler::Batch& iceP_batch, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_submitBatch(iceP_batch, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::scheduler::Batch& iceP_batch, const ::scheduler::Callback_SchedulerServer_submitBatchPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_submitBatch(iceP_batch, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_submitBatch(const ::scheduler::Batch& iceP_batch, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_submitBatchPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_submitBatch(iceP_batch, context, del, cookie);
    }

    void end_submitBatch(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_submitBatch(const ::scheduler::Batch&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void startJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_startJob(_iceI_begin_startJob(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_startJob(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::scheduler::JobId& iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startJob(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startJob(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::scheduler::JobId& iceP_id, const ::scheduler::Callback_SchedulerServer_startJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startJob(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_startJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_startJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startJob(iceP_id, context, del, cookie);
    }

    void end_startJob(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_startJob(const ::scheduler::JobId&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void stopJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stopJob(_iceI_begin_stopJob(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stopJob(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::scheduler::JobId& iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopJob(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopJob(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::scheduler::JobId& iceP_id, const ::scheduler::Callback_SchedulerServer_stopJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopJob(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_stopJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopJob(iceP_id, context, del, cookie);
    }

    void end_stopJob(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stopJob(const ::scheduler::JobId&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void invalidateJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_invalidateJob(_iceI_begin_invalidateJob(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_invalidateJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_invalidateJob(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invalidateJob(const ::scheduler::JobId& iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_invalidateJob(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidateJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_invalidateJob(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidateJob(const ::scheduler::JobId& iceP_id, const ::scheduler::Callback_SchedulerServer_invalidateJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_invalidateJob(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_invalidateJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_invalidateJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_invalidateJob(iceP_id, context, del, cookie);
    }

    void end_invalidateJob(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_invalidateJob(const ::scheduler::JobId&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_reset(_iceI_begin_reset(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_reset(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::scheduler::Callback_SchedulerServer_resetPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_resetPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(context, del, cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_reset(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string dumpStatus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_dumpStatus(_iceI_begin_dumpStatus(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_dumpStatus(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_dumpStatus(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_dumpStatus(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::scheduler::Callback_SchedulerServer_dumpStatusPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_dumpStatus(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_dumpStatus(const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_dumpStatusPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_dumpStatus(context, del, cookie);
    }

    ::std::string end_dumpStatus(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_dumpStatus(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::scheduler::JobDTOSeq getJobs(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getJobs(_iceI_begin_getJobs(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getJobs(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJobs(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJobs(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::scheduler::Callback_SchedulerServer_getJobsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJobs(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJobs(const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_getJobsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJobs(context, del, cookie);
    }

    ::scheduler::JobDTOSeq end_getJobs(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getJobs(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::scheduler::JobSeq getStartableJob(const ::scheduler::WorkerId& iceP_worker, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getStartableJob(_iceI_begin_getStartableJob(iceP_worker, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::scheduler::WorkerId& iceP_worker, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getStartableJob(iceP_worker, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::scheduler::WorkerId& iceP_worker, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStartableJob(iceP_worker, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::scheduler::WorkerId& iceP_worker, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStartableJob(iceP_worker, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::scheduler::WorkerId& iceP_worker, const ::scheduler::Callback_SchedulerServer_getStartableJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStartableJob(iceP_worker, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartableJob(const ::scheduler::WorkerId& iceP_worker, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_getStartableJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStartableJob(iceP_worker, context, del, cookie);
    }

    ::scheduler::JobSeq end_getStartableJob(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getStartableJob(const ::scheduler::WorkerId&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::scheduler::JobDTO getJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getJob(_iceI_begin_getJob(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getJob(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::scheduler::JobId& iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJob(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJob(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::scheduler::JobId& iceP_id, const ::scheduler::Callback_SchedulerServer_getJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJob(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJob(const ::scheduler::JobId& iceP_id, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_getJobPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJob(iceP_id, context, del, cookie);
    }

    ::scheduler::JobDTO end_getJob(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getJob(const ::scheduler::JobId&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void addListener(const ::scheduler::SchedulerServerListenerPrx& iceP_listener, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_addListener(_iceI_begin_addListener(iceP_listener, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::scheduler::SchedulerServerListenerPrx& iceP_listener, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addListener(iceP_listener, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::scheduler::SchedulerServerListenerPrx& iceP_listener, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addListener(iceP_listener, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::scheduler::SchedulerServerListenerPrx& iceP_listener, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addListener(iceP_listener, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::scheduler::SchedulerServerListenerPrx& iceP_listener, const ::scheduler::Callback_SchedulerServer_addListenerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addListener(iceP_listener, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::scheduler::SchedulerServerListenerPrx& iceP_listener, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_addListenerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addListener(iceP_listener, context, del, cookie);
    }

    void end_addListener(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addListener(const ::scheduler::SchedulerServerListenerPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void addListenerWithIdent(const ::Ice::Identity& iceP_ident, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_addListenerWithIdent(_iceI_begin_addListenerWithIdent(iceP_ident, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& iceP_ident, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addListenerWithIdent(iceP_ident, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& iceP_ident, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addListenerWithIdent(iceP_ident, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& iceP_ident, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addListenerWithIdent(iceP_ident, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& iceP_ident, const ::scheduler::Callback_SchedulerServer_addListenerWithIdentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addListenerWithIdent(iceP_ident, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerWithIdent(const ::Ice::Identity& iceP_ident, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_addListenerWithIdentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addListenerWithIdent(iceP_ident, context, del, cookie);
    }

    void end_addListenerWithIdent(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addListenerWithIdent(const ::Ice::Identity&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void onWorkerUpdate(const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onWorkerUpdate(_iceI_begin_onWorkerUpdate(iceP_x, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onWorkerUpdate(const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onWorkerUpdate(iceP_x, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onWorkerUpdate(const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onWorkerUpdate(iceP_x, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onWorkerUpdate(const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onWorkerUpdate(iceP_x, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onWorkerUpdate(const ::scheduler::WorkerUpdate& iceP_x, const ::scheduler::Callback_SchedulerServer_onWorkerUpdatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onWorkerUpdate(iceP_x, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_onWorkerUpdate(const ::scheduler::WorkerUpdate& iceP_x, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_onWorkerUpdatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onWorkerUpdate(iceP_x, context, del, cookie);
    }

    void end_onWorkerUpdate(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onWorkerUpdate(const ::scheduler::WorkerUpdate&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void imageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_imageReady(_iceI_begin_imageReady(iceP_batchId, iceP_imgId, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_imageReady(iceP_batchId, iceP_imgId, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_imageReady(iceP_batchId, iceP_imgId, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_imageReady(iceP_batchId, iceP_imgId, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::scheduler::Callback_SchedulerServer_imageReadyPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_imageReady(iceP_batchId, iceP_imgId, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_imageReady(const ::std::string& iceP_batchId, const ::std::string& iceP_imgId, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_imageReadyPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_imageReady(iceP_batchId, iceP_imgId, context, del, cookie);
    }

    void end_imageReady(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_imageReady(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setState(_iceI_begin_setState(iceP_id, iceP_state, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setState(iceP_id, iceP_state, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setState(iceP_id, iceP_state, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setState(iceP_id, iceP_state, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::scheduler::Callback_SchedulerServer_setStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setState(iceP_id, iceP_state, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setState(const ::scheduler::JobId& iceP_id, ::scheduler::EnumJobState iceP_state, const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_setStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setState(iceP_id, iceP_state, context, del, cookie);
    }

    void end_setState(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setState(const ::scheduler::JobId&, ::scheduler::EnumJobState, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::scheduler::Image getImage(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getImage(_iceI_begin_getImage(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImage(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::scheduler::Callback_SchedulerServer_getImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context, const ::scheduler::Callback_SchedulerServer_getImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(context, del, cookie);
    }

    ::scheduler::Image end_getImage(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImage(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace scheduler
{

class SchedulerServerListener : public virtual ::Ice::Object
{
public:

    typedef SchedulerServerListenerPrx ProxyType;
    typedef SchedulerServerListenerPtr PointerType;

    virtual ~SchedulerServerListener();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void onImage_async(const ::scheduler::AMD_SchedulerServerListener_onImagePtr&, const ::scheduler::Image&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_onImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onUpdate_async(const ::scheduler::AMD_SchedulerServerListener_onUpdatePtr&, const ::scheduler::JobDTOSeq&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_onUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onImageReady_async(const ::scheduler::AMD_SchedulerServerListener_onImageReadyPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_onImageReady(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onReset_async(const ::scheduler::AMD_SchedulerServerListener_onResetPtr&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_onReset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const SchedulerServerListener& lhs, const SchedulerServerListener& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const SchedulerServerListener& lhs, const SchedulerServerListener& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class SchedulerServer : public virtual ::Ice::Object
{
public:

    typedef SchedulerServerPrx ProxyType;
    typedef SchedulerServerPtr PointerType;

    virtual ~SchedulerServer();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void submitBatch_async(const ::scheduler::AMD_SchedulerServer_submitBatchPtr&, const ::scheduler::Batch&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_submitBatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void startJob_async(const ::scheduler::AMD_SchedulerServer_startJobPtr&, const ::scheduler::JobId&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_startJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopJob_async(const ::scheduler::AMD_SchedulerServer_stopJobPtr&, const ::scheduler::JobId&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_stopJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void invalidateJob_async(const ::scheduler::AMD_SchedulerServer_invalidateJobPtr&, const ::scheduler::JobId&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_invalidateJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reset_async(const ::scheduler::AMD_SchedulerServer_resetPtr&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_reset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void dumpStatus_async(const ::scheduler::AMD_SchedulerServer_dumpStatusPtr&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_dumpStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getJobs_async(const ::scheduler::AMD_SchedulerServer_getJobsPtr&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getJobs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getStartableJob_async(const ::scheduler::AMD_SchedulerServer_getStartableJobPtr&, const ::scheduler::WorkerId&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getStartableJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getJob_async(const ::scheduler::AMD_SchedulerServer_getJobPtr&, const ::scheduler::JobId&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addListener_async(const ::scheduler::AMD_SchedulerServer_addListenerPtr&, const ::scheduler::SchedulerServerListenerPrx&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_addListener(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addListenerWithIdent_async(const ::scheduler::AMD_SchedulerServer_addListenerWithIdentPtr&, const ::Ice::Identity&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_addListenerWithIdent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onWorkerUpdate_async(const ::scheduler::AMD_SchedulerServer_onWorkerUpdatePtr&, const ::scheduler::WorkerUpdate&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_onWorkerUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void imageReady_async(const ::scheduler::AMD_SchedulerServer_imageReadyPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_imageReady(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setState_async(const ::scheduler::AMD_SchedulerServer_setStatePtr&, const ::scheduler::JobId&, ::scheduler::EnumJobState, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getImage_async(const ::scheduler::AMD_SchedulerServer_getImagePtr&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const SchedulerServer& lhs, const SchedulerServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const SchedulerServer& lhs, const SchedulerServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::scheduler::JobId>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::JobId, S>
{
    static void write(S* ostr, const ::scheduler::JobId& v)
    {
        ostr->write(v.id);
        ostr->write(v.batch);
    }
};

template<typename S>
struct StreamReader< ::scheduler::JobId, S>
{
    static void read(S* istr, ::scheduler::JobId& v)
    {
        istr->read(v.id);
        istr->read(v.batch);
    }
};

template<>
struct StreamableTraits< ::scheduler::EnumJobState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 7;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::scheduler::JobUpdate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::JobUpdate, S>
{
    static void write(S* ostr, const ::scheduler::JobUpdate& v)
    {
        ostr->write(v.id);
        ostr->write(v.pctComplete);
        ostr->write(v.status);
    }
};

template<typename S>
struct StreamReader< ::scheduler::JobUpdate, S>
{
    static void read(S* istr, ::scheduler::JobUpdate& v)
    {
        istr->read(v.id);
        istr->read(v.pctComplete);
        istr->read(v.status);
    }
};

template<>
struct StreamableTraits< ::scheduler::WorkerId>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::WorkerId, S>
{
    static void write(S* ostr, const ::scheduler::WorkerId& v)
    {
        ostr->write(v.id);
    }
};

template<typename S>
struct StreamReader< ::scheduler::WorkerId, S>
{
    static void read(S* istr, ::scheduler::WorkerId& v)
    {
        istr->read(v.id);
    }
};

template<>
struct StreamableTraits< ::scheduler::WorkerStateDescription>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::WorkerStateDescription, S>
{
    static void write(S* ostr, const ::scheduler::WorkerStateDescription& v)
    {
        ostr->write(v.id);
        ostr->write(v.state);
    }
};

template<typename S>
struct StreamReader< ::scheduler::WorkerStateDescription, S>
{
    static void read(S* istr, ::scheduler::WorkerStateDescription& v)
    {
        istr->read(v.id);
        istr->read(v.state);
    }
};

template<>
struct StreamableTraits< ::scheduler::WorkerUpdate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::WorkerUpdate, S>
{
    static void write(S* ostr, const ::scheduler::WorkerUpdate& v)
    {
        ostr->write(v.id);
        ostr->write(v.updates);
    }
};

template<typename S>
struct StreamReader< ::scheduler::WorkerUpdate, S>
{
    static void read(S* istr, ::scheduler::WorkerUpdate& v)
    {
        istr->read(v.id);
        istr->read(v.updates);
    }
};

template<>
struct StreamableTraits< ::scheduler::JobStateDescription>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 23;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::JobStateDescription, S>
{
    static void write(S* ostr, const ::scheduler::JobStateDescription& v)
    {
        ostr->write(v.id);
        ostr->write(v.startTime);
        ostr->write(v.updateTime);
        ostr->write(v.statusMsg);
        ostr->write(v.pctComplete);
    }
};

template<typename S>
struct StreamReader< ::scheduler::JobStateDescription, S>
{
    static void read(S* istr, ::scheduler::JobStateDescription& v)
    {
        istr->read(v.id);
        istr->read(v.startTime);
        istr->read(v.updateTime);
        istr->read(v.statusMsg);
        istr->read(v.pctComplete);
    }
};

template<>
struct StreamableTraits< ::scheduler::Job>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::Job, S>
{
    static void write(S* ostr, const ::scheduler::Job& v)
    {
        ostr->write(v.id);
        ostr->write(v.dependencies);
        ostr->write(v.priority);
        ostr->write(v.pwd);
        ostr->write(v.cmdLine);
        ostr->write(v.env);
    }
};

template<typename S>
struct StreamReader< ::scheduler::Job, S>
{
    static void read(S* istr, ::scheduler::Job& v)
    {
        istr->read(v.id);
        istr->read(v.dependencies);
        istr->read(v.priority);
        istr->read(v.pwd);
        istr->read(v.cmdLine);
        istr->read(v.env);
    }
};

template<>
struct StreamableTraits< ::scheduler::JobState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::JobState, S>
{
    static void write(S* ostr, const ::scheduler::JobState& v)
    {
        ostr->write(v.id);
        ostr->write(v.state);
        ostr->write(v.currentWorker);
        ostr->write(v.jobStatus);
        ostr->write(v.workerStatus);
    }
};

template<typename S>
struct StreamReader< ::scheduler::JobState, S>
{
    static void read(S* istr, ::scheduler::JobState& v)
    {
        istr->read(v.id);
        istr->read(v.state);
        istr->read(v.currentWorker);
        istr->read(v.jobStatus);
        istr->read(v.workerStatus);
    }
};

template<>
struct StreamableTraits< ::scheduler::JobDTO>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::JobDTO, S>
{
    static void write(S* ostr, const ::scheduler::JobDTO& v)
    {
        ostr->write(v.job);
        ostr->write(v.state);
    }
};

template<typename S>
struct StreamReader< ::scheduler::JobDTO, S>
{
    static void read(S* istr, ::scheduler::JobDTO& v)
    {
        istr->read(v.job);
        istr->read(v.state);
    }
};

template<>
struct StreamableTraits< ::scheduler::DuplicateJob>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::scheduler::DuplicateJob, S>
{
    static void write(S* ostr, const ::scheduler::DuplicateJob& v)
    {
        ostr->write(v.id);
    }
};

template<typename S>
struct StreamReader< ::scheduler::DuplicateJob, S>
{
    static void read(S* istr, ::scheduler::DuplicateJob& v)
    {
        istr->read(v.id);
    }
};

template<>
struct StreamableTraits< ::scheduler::JobCycleDetected>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::scheduler::JobCycleDetected, S>
{
    static void write(S* ostr, const ::scheduler::JobCycleDetected& v)
    {
        ostr->write(v.badNodes);
    }
};

template<typename S>
struct StreamReader< ::scheduler::JobCycleDetected, S>
{
    static void read(S* istr, ::scheduler::JobCycleDetected& v)
    {
        istr->read(v.badNodes);
    }
};

template<>
struct StreamableTraits< ::scheduler::JobNotExist>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::scheduler::JobNotExist, S>
{
    static void write(S* ostr, const ::scheduler::JobNotExist& v)
    {
        ostr->write(v.id);
    }
};

template<typename S>
struct StreamReader< ::scheduler::JobNotExist, S>
{
    static void read(S* istr, ::scheduler::JobNotExist& v)
    {
        istr->read(v.id);
    }
};

template<>
struct StreamableTraits< ::scheduler::JobNotStartable>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::scheduler::JobNotStartable, S>
{
    static void write(S* ostr, const ::scheduler::JobNotStartable& v)
    {
        ostr->write(v.id);
    }
};

template<typename S>
struct StreamReader< ::scheduler::JobNotStartable, S>
{
    static void read(S* istr, ::scheduler::JobNotStartable& v)
    {
        istr->read(v.id);
    }
};

template<>
struct StreamableTraits< ::scheduler::Batch>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::Batch, S>
{
    static void write(S* ostr, const ::scheduler::Batch& v)
    {
        ostr->write(v.jobs);
    }
};

template<typename S>
struct StreamReader< ::scheduler::Batch, S>
{
    static void read(S* istr, ::scheduler::Batch& v)
    {
        istr->read(v.jobs);
    }
};

template<>
struct StreamableTraits< ::scheduler::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::scheduler::Image, S>
{
    static void write(S* ostr, const ::scheduler::Image& v)
    {
        ostr->write(v.jobs);
        ostr->write(v.currentImage);
    }
};

template<typename S>
struct StreamReader< ::scheduler::Image, S>
{
    static void read(S* istr, ::scheduler::Image& v)
    {
        istr->read(v.jobs);
        istr->read(v.currentImage);
    }
};

}

namespace scheduler
{

template<class T>
class CallbackNC_SchedulerServerListener_onImage : public Callback_SchedulerServerListener_onImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServerListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServerListener_onImagePtr
newCallback_SchedulerServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onImagePtr
newCallback_SchedulerServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onImagePtr
newCallback_SchedulerServerListener_onImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onImagePtr
newCallback_SchedulerServerListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServerListener_onImage : public Callback_SchedulerServerListener_onImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServerListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServerListener_onImagePtr
newCallback_SchedulerServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onImagePtr
newCallback_SchedulerServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onImagePtr
newCallback_SchedulerServerListener_onImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onImagePtr
newCallback_SchedulerServerListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServerListener_onUpdate : public Callback_SchedulerServerListener_onUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServerListener_onUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServerListener_onUpdatePtr
newCallback_SchedulerServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onUpdatePtr
newCallback_SchedulerServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onUpdatePtr
newCallback_SchedulerServerListener_onUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onUpdatePtr
newCallback_SchedulerServerListener_onUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServerListener_onUpdate : public Callback_SchedulerServerListener_onUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServerListener_onUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServerListener_onUpdatePtr
newCallback_SchedulerServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onUpdatePtr
newCallback_SchedulerServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onUpdatePtr
newCallback_SchedulerServerListener_onUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onUpdatePtr
newCallback_SchedulerServerListener_onUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServerListener_onImageReady : public Callback_SchedulerServerListener_onImageReady_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServerListener_onImageReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServerListener_onImageReadyPtr
newCallback_SchedulerServerListener_onImageReady(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onImageReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onImageReadyPtr
newCallback_SchedulerServerListener_onImageReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onImageReady<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onImageReadyPtr
newCallback_SchedulerServerListener_onImageReady(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onImageReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onImageReadyPtr
newCallback_SchedulerServerListener_onImageReady(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onImageReady<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServerListener_onImageReady : public Callback_SchedulerServerListener_onImageReady_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServerListener_onImageReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServerListener_onImageReadyPtr
newCallback_SchedulerServerListener_onImageReady(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onImageReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onImageReadyPtr
newCallback_SchedulerServerListener_onImageReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onImageReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onImageReadyPtr
newCallback_SchedulerServerListener_onImageReady(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onImageReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onImageReadyPtr
newCallback_SchedulerServerListener_onImageReady(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onImageReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServerListener_onReset : public Callback_SchedulerServerListener_onReset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServerListener_onReset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServerListener_onResetPtr
newCallback_SchedulerServerListener_onReset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onReset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onResetPtr
newCallback_SchedulerServerListener_onReset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onReset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onResetPtr
newCallback_SchedulerServerListener_onReset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onReset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServerListener_onResetPtr
newCallback_SchedulerServerListener_onReset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServerListener_onReset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServerListener_onReset : public Callback_SchedulerServerListener_onReset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServerListener_onReset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServerListener_onResetPtr
newCallback_SchedulerServerListener_onReset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onReset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onResetPtr
newCallback_SchedulerServerListener_onReset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onReset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onResetPtr
newCallback_SchedulerServerListener_onReset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onReset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServerListener_onResetPtr
newCallback_SchedulerServerListener_onReset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServerListener_onReset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_submitBatch : public Callback_SchedulerServer_submitBatch_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_submitBatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_submitBatch(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_SchedulerServer_submitBatchPtr
newCallback_SchedulerServer_submitBatch(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_submitBatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_submitBatchPtr
newCallback_SchedulerServer_submitBatch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_submitBatch<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_submitBatchPtr
newCallback_SchedulerServer_submitBatch(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_submitBatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_submitBatchPtr
newCallback_SchedulerServer_submitBatch(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_submitBatch<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_submitBatch : public Callback_SchedulerServer_submitBatch_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_submitBatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_submitBatch(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_SchedulerServer_submitBatchPtr
newCallback_SchedulerServer_submitBatch(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_submitBatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_submitBatchPtr
newCallback_SchedulerServer_submitBatch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_submitBatch<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_submitBatchPtr
newCallback_SchedulerServer_submitBatch(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_submitBatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_submitBatchPtr
newCallback_SchedulerServer_submitBatch(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_submitBatch<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_startJob : public Callback_SchedulerServer_startJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_startJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_startJob(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_SchedulerServer_startJobPtr
newCallback_SchedulerServer_startJob(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_startJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_startJobPtr
newCallback_SchedulerServer_startJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_startJob<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_startJobPtr
newCallback_SchedulerServer_startJob(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_startJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_startJobPtr
newCallback_SchedulerServer_startJob(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_startJob<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_startJob : public Callback_SchedulerServer_startJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_startJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_startJob(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_SchedulerServer_startJobPtr
newCallback_SchedulerServer_startJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_startJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_startJobPtr
newCallback_SchedulerServer_startJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_startJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_startJobPtr
newCallback_SchedulerServer_startJob(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_startJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_startJobPtr
newCallback_SchedulerServer_startJob(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_startJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_stopJob : public Callback_SchedulerServer_stopJob_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_stopJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServer_stopJobPtr
newCallback_SchedulerServer_stopJob(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_stopJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_stopJobPtr
newCallback_SchedulerServer_stopJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_stopJob<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_stopJobPtr
newCallback_SchedulerServer_stopJob(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_stopJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_stopJobPtr
newCallback_SchedulerServer_stopJob(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_stopJob<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_stopJob : public Callback_SchedulerServer_stopJob_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_stopJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServer_stopJobPtr
newCallback_SchedulerServer_stopJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_stopJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_stopJobPtr
newCallback_SchedulerServer_stopJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_stopJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_stopJobPtr
newCallback_SchedulerServer_stopJob(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_stopJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_stopJobPtr
newCallback_SchedulerServer_stopJob(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_stopJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_invalidateJob : public Callback_SchedulerServer_invalidateJob_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_invalidateJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServer_invalidateJobPtr
newCallback_SchedulerServer_invalidateJob(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_invalidateJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_invalidateJobPtr
newCallback_SchedulerServer_invalidateJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_invalidateJob<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_invalidateJobPtr
newCallback_SchedulerServer_invalidateJob(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_invalidateJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_invalidateJobPtr
newCallback_SchedulerServer_invalidateJob(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_invalidateJob<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_invalidateJob : public Callback_SchedulerServer_invalidateJob_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_invalidateJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServer_invalidateJobPtr
newCallback_SchedulerServer_invalidateJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_invalidateJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_invalidateJobPtr
newCallback_SchedulerServer_invalidateJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_invalidateJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_invalidateJobPtr
newCallback_SchedulerServer_invalidateJob(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_invalidateJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_invalidateJobPtr
newCallback_SchedulerServer_invalidateJob(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_invalidateJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_reset : public Callback_SchedulerServer_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServer_resetPtr
newCallback_SchedulerServer_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_resetPtr
newCallback_SchedulerServer_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_reset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_resetPtr
newCallback_SchedulerServer_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_resetPtr
newCallback_SchedulerServer_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_reset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_reset : public Callback_SchedulerServer_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServer_resetPtr
newCallback_SchedulerServer_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_resetPtr
newCallback_SchedulerServer_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_resetPtr
newCallback_SchedulerServer_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_resetPtr
newCallback_SchedulerServer_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_dumpStatus : public Callback_SchedulerServer_dumpStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_SchedulerServer_dumpStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_dumpStatus(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_SchedulerServer_dumpStatusPtr
newCallback_SchedulerServer_dumpStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_dumpStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_dumpStatusPtr
newCallback_SchedulerServer_dumpStatus(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_dumpStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_dumpStatus : public Callback_SchedulerServer_dumpStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_SchedulerServer_dumpStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_dumpStatus(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_SchedulerServer_dumpStatusPtr
newCallback_SchedulerServer_dumpStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_dumpStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_dumpStatusPtr
newCallback_SchedulerServer_dumpStatus(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_dumpStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_getJobs : public Callback_SchedulerServer_getJobs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::scheduler::JobDTOSeq&);

    CallbackNC_SchedulerServer_getJobs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::scheduler::JobDTOSeq ret;
        try
        {
            ret = proxy->end_getJobs(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_SchedulerServer_getJobsPtr
newCallback_SchedulerServer_getJobs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::scheduler::JobDTOSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_getJobs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_getJobsPtr
newCallback_SchedulerServer_getJobs(T* instance, void (T::*cb)(const ::scheduler::JobDTOSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_getJobs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_getJobs : public Callback_SchedulerServer_getJobs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::scheduler::JobDTOSeq&, const CT&);

    Callback_SchedulerServer_getJobs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::scheduler::JobDTOSeq ret;
        try
        {
            ret = proxy->end_getJobs(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_SchedulerServer_getJobsPtr
newCallback_SchedulerServer_getJobs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::scheduler::JobDTOSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_getJobs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_getJobsPtr
newCallback_SchedulerServer_getJobs(T* instance, void (T::*cb)(const ::scheduler::JobDTOSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_getJobs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_getStartableJob : public Callback_SchedulerServer_getStartableJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::scheduler::JobSeq&);

    CallbackNC_SchedulerServer_getStartableJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::scheduler::JobSeq ret;
        try
        {
            ret = proxy->end_getStartableJob(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_SchedulerServer_getStartableJobPtr
newCallback_SchedulerServer_getStartableJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::scheduler::JobSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_getStartableJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_getStartableJobPtr
newCallback_SchedulerServer_getStartableJob(T* instance, void (T::*cb)(const ::scheduler::JobSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_getStartableJob<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_getStartableJob : public Callback_SchedulerServer_getStartableJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::scheduler::JobSeq&, const CT&);

    Callback_SchedulerServer_getStartableJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::scheduler::JobSeq ret;
        try
        {
            ret = proxy->end_getStartableJob(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_SchedulerServer_getStartableJobPtr
newCallback_SchedulerServer_getStartableJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::scheduler::JobSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_getStartableJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_getStartableJobPtr
newCallback_SchedulerServer_getStartableJob(T* instance, void (T::*cb)(const ::scheduler::JobSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_getStartableJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_getJob : public Callback_SchedulerServer_getJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::scheduler::JobDTO&);

    CallbackNC_SchedulerServer_getJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::scheduler::JobDTO ret;
        try
        {
            ret = proxy->end_getJob(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_SchedulerServer_getJobPtr
newCallback_SchedulerServer_getJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::scheduler::JobDTO&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_getJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_getJobPtr
newCallback_SchedulerServer_getJob(T* instance, void (T::*cb)(const ::scheduler::JobDTO&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_getJob<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_getJob : public Callback_SchedulerServer_getJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::scheduler::JobDTO&, const CT&);

    Callback_SchedulerServer_getJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::scheduler::JobDTO ret;
        try
        {
            ret = proxy->end_getJob(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_SchedulerServer_getJobPtr
newCallback_SchedulerServer_getJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::scheduler::JobDTO&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_getJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_getJobPtr
newCallback_SchedulerServer_getJob(T* instance, void (T::*cb)(const ::scheduler::JobDTO&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_getJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_addListener : public Callback_SchedulerServer_addListener_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_addListener(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServer_addListenerPtr
newCallback_SchedulerServer_addListener(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_addListener<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_addListenerPtr
newCallback_SchedulerServer_addListener(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_addListener<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_addListenerPtr
newCallback_SchedulerServer_addListener(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_addListener<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_addListenerPtr
newCallback_SchedulerServer_addListener(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_addListener<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_addListener : public Callback_SchedulerServer_addListener_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_addListener(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServer_addListenerPtr
newCallback_SchedulerServer_addListener(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_addListener<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_addListenerPtr
newCallback_SchedulerServer_addListener(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_addListener<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_addListenerPtr
newCallback_SchedulerServer_addListener(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_addListener<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_addListenerPtr
newCallback_SchedulerServer_addListener(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_addListener<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_addListenerWithIdent : public Callback_SchedulerServer_addListenerWithIdent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_addListenerWithIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServer_addListenerWithIdentPtr
newCallback_SchedulerServer_addListenerWithIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_addListenerWithIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_addListenerWithIdentPtr
newCallback_SchedulerServer_addListenerWithIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_addListenerWithIdent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_addListenerWithIdentPtr
newCallback_SchedulerServer_addListenerWithIdent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_addListenerWithIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_addListenerWithIdentPtr
newCallback_SchedulerServer_addListenerWithIdent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_addListenerWithIdent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_addListenerWithIdent : public Callback_SchedulerServer_addListenerWithIdent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_addListenerWithIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServer_addListenerWithIdentPtr
newCallback_SchedulerServer_addListenerWithIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_addListenerWithIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_addListenerWithIdentPtr
newCallback_SchedulerServer_addListenerWithIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_addListenerWithIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_addListenerWithIdentPtr
newCallback_SchedulerServer_addListenerWithIdent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_addListenerWithIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_addListenerWithIdentPtr
newCallback_SchedulerServer_addListenerWithIdent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_addListenerWithIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_onWorkerUpdate : public Callback_SchedulerServer_onWorkerUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_onWorkerUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServer_onWorkerUpdatePtr
newCallback_SchedulerServer_onWorkerUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_onWorkerUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_onWorkerUpdatePtr
newCallback_SchedulerServer_onWorkerUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_onWorkerUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_onWorkerUpdatePtr
newCallback_SchedulerServer_onWorkerUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_onWorkerUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_onWorkerUpdatePtr
newCallback_SchedulerServer_onWorkerUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_onWorkerUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_onWorkerUpdate : public Callback_SchedulerServer_onWorkerUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_onWorkerUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServer_onWorkerUpdatePtr
newCallback_SchedulerServer_onWorkerUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_onWorkerUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_onWorkerUpdatePtr
newCallback_SchedulerServer_onWorkerUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_onWorkerUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_onWorkerUpdatePtr
newCallback_SchedulerServer_onWorkerUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_onWorkerUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_onWorkerUpdatePtr
newCallback_SchedulerServer_onWorkerUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_onWorkerUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_imageReady : public Callback_SchedulerServer_imageReady_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_imageReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServer_imageReadyPtr
newCallback_SchedulerServer_imageReady(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_imageReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_imageReadyPtr
newCallback_SchedulerServer_imageReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_imageReady<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_imageReadyPtr
newCallback_SchedulerServer_imageReady(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_imageReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_imageReadyPtr
newCallback_SchedulerServer_imageReady(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_imageReady<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_imageReady : public Callback_SchedulerServer_imageReady_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_imageReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServer_imageReadyPtr
newCallback_SchedulerServer_imageReady(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_imageReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_imageReadyPtr
newCallback_SchedulerServer_imageReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_imageReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_imageReadyPtr
newCallback_SchedulerServer_imageReady(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_imageReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_imageReadyPtr
newCallback_SchedulerServer_imageReady(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_imageReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_setState : public Callback_SchedulerServer_setState_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedulerServer_setState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedulerServer_setStatePtr
newCallback_SchedulerServer_setState(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_setState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_setStatePtr
newCallback_SchedulerServer_setState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_setState<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedulerServer_setStatePtr
newCallback_SchedulerServer_setState(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_setState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_setStatePtr
newCallback_SchedulerServer_setState(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_setState<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_setState : public Callback_SchedulerServer_setState_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedulerServer_setState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedulerServer_setStatePtr
newCallback_SchedulerServer_setState(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_setState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_setStatePtr
newCallback_SchedulerServer_setState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_setState<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_setStatePtr
newCallback_SchedulerServer_setState(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_setState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_setStatePtr
newCallback_SchedulerServer_setState(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_setState<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SchedulerServer_getImage : public Callback_SchedulerServer_getImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::scheduler::Image&);

    CallbackNC_SchedulerServer_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::scheduler::Image ret;
        try
        {
            ret = proxy->end_getImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_SchedulerServer_getImagePtr
newCallback_SchedulerServer_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::scheduler::Image&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_getImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedulerServer_getImagePtr
newCallback_SchedulerServer_getImage(T* instance, void (T::*cb)(const ::scheduler::Image&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedulerServer_getImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedulerServer_getImage : public Callback_SchedulerServer_getImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::scheduler::Image&, const CT&);

    Callback_SchedulerServer_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::scheduler::SchedulerServerPrx proxy = ::scheduler::SchedulerServerPrx::uncheckedCast(result->getProxy());
        ::scheduler::Image ret;
        try
        {
            ret = proxy->end_getImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_SchedulerServer_getImagePtr
newCallback_SchedulerServer_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::scheduler::Image&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedulerServer_getImagePtr
newCallback_SchedulerServer_getImage(T* instance, void (T::*cb)(const ::scheduler::Image&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedulerServer_getImage<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
