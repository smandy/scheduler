// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.0
//
// <auto-generated>
//
// Generated from file `scheduler.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var scheduler = __M.module("scheduler");
    Slice.defineSequence(scheduler, "StringSeqHelper", "Ice.StringHelper", false);
    Slice.defineDictionary(scheduler, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    scheduler.JobId = Slice.defineStruct(
        function(id, batch)
        {
            this.id = id !== undefined ? id : "";
            this.batch = batch !== undefined ? batch : "";
        },
        true,
        function(__os)
        {
            __os.writeString(this.id);
            __os.writeString(this.batch);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.batch = __is.readString();
        },
        2, 
        false);
    Slice.defineSequence(scheduler, "JobIdSeqHelper", "scheduler.JobId", false);
    Slice.defineDictionary(scheduler, "tmpJobId", "tmpJobIdHelper", "scheduler.JobId", "scheduler.JobId", false, Ice.HashMap.compareEquals, undefined, Ice.HashMap.compareEquals);

    scheduler.EnumJobState = Slice.defineEnum([
        ['DORMANT', 0], ['READY', 1], ['SCHEDULED', 2], ['STARTED', 3], ['CANCELLING', 4],
        ['CANCELLED', 5], ['FAILED', 6], ['COMPLETED', 7]]);

    scheduler.JobUpdate = Slice.defineStruct(
        function(id, pctComplete, status)
        {
            this.id = id !== undefined ? id : new scheduler.JobId();
            this.pctComplete = pctComplete !== undefined ? pctComplete : 0;
            this.status = status !== undefined ? status : "";
        },
        true,
        function(__os)
        {
            scheduler.JobId.write(__os, this.id);
            __os.writeInt(this.pctComplete);
            __os.writeString(this.status);
        },
        function(__is)
        {
            this.id = scheduler.JobId.read(__is, this.id);
            this.pctComplete = __is.readInt();
            this.status = __is.readString();
        },
        7, 
        false);
    Slice.defineSequence(scheduler, "JobUpdateSeqHelper", "scheduler.JobUpdate", false);

    scheduler.WorkerId = Slice.defineStruct(
        function(id)
        {
            this.id = id !== undefined ? id : "";
        },
        true,
        function(__os)
        {
            __os.writeString(this.id);
        },
        function(__is)
        {
            this.id = __is.readString();
        },
        1, 
        false);
    Slice.defineSequence(scheduler, "WorkerIdSeqHelper", "scheduler.WorkerId", false);

    scheduler.WorkerStateDescription = Slice.defineStruct(
        function(id, state)
        {
            this.id = id !== undefined ? id : new scheduler.JobId();
            this.state = state !== undefined ? state : scheduler.EnumJobState.DORMANT;
        },
        true,
        function(__os)
        {
            scheduler.JobId.write(__os, this.id);
            scheduler.EnumJobState.__write(__os, this.state);
        },
        function(__is)
        {
            this.id = scheduler.JobId.read(__is, this.id);
            this.state = scheduler.EnumJobState.__read(__is);
        },
        3, 
        false);
    Slice.defineSequence(scheduler, "WorkerStateDescriptionSeqHelper", "scheduler.WorkerStateDescription", false);

    scheduler.WorkerUpdate = Slice.defineStruct(
        function(id, updates)
        {
            this.id = id !== undefined ? id : new scheduler.WorkerId();
            this.updates = updates !== undefined ? updates : null;
        },
        true,
        function(__os)
        {
            scheduler.WorkerId.write(__os, this.id);
            scheduler.WorkerStateDescriptionSeqHelper.write(__os, this.updates);
        },
        function(__is)
        {
            this.id = scheduler.WorkerId.read(__is, this.id);
            this.updates = scheduler.WorkerStateDescriptionSeqHelper.read(__is);
        },
        2, 
        false);

    scheduler.JobStateDescription = Slice.defineStruct(
        function(id, startTime, updateTime, statusMsg, pctComplete)
        {
            this.id = id !== undefined ? id : new scheduler.JobId();
            this.startTime = startTime !== undefined ? startTime : 0;
            this.updateTime = updateTime !== undefined ? updateTime : 0;
            this.statusMsg = statusMsg !== undefined ? statusMsg : "";
            this.pctComplete = pctComplete !== undefined ? pctComplete : 0;
        },
        true,
        function(__os)
        {
            scheduler.JobId.write(__os, this.id);
            __os.writeLong(this.startTime);
            __os.writeLong(this.updateTime);
            __os.writeString(this.statusMsg);
            __os.writeInt(this.pctComplete);
        },
        function(__is)
        {
            this.id = scheduler.JobId.read(__is, this.id);
            this.startTime = __is.readLong();
            this.updateTime = __is.readLong();
            this.statusMsg = __is.readString();
            this.pctComplete = __is.readInt();
        },
        23, 
        false);
    Slice.defineSequence(scheduler, "JobStateDescriptionSeqHelper", "scheduler.JobStateDescription", false);

    scheduler.Job = Slice.defineStruct(
        function(id, dependencies, priority, pwd, cmdLine, env)
        {
            this.id = id !== undefined ? id : new scheduler.JobId();
            this.dependencies = dependencies !== undefined ? dependencies : null;
            this.priority = priority !== undefined ? priority : 0;
            this.pwd = pwd !== undefined ? pwd : "";
            this.cmdLine = cmdLine !== undefined ? cmdLine : null;
            this.env = env !== undefined ? env : null;
        },
        false,
        function(__os)
        {
            scheduler.JobId.write(__os, this.id);
            scheduler.JobIdSeqHelper.write(__os, this.dependencies);
            __os.writeInt(this.priority);
            __os.writeString(this.pwd);
            scheduler.StringSeqHelper.write(__os, this.cmdLine);
            scheduler.StringStringDictHelper.write(__os, this.env);
        },
        function(__is)
        {
            this.id = scheduler.JobId.read(__is, this.id);
            this.dependencies = scheduler.JobIdSeqHelper.read(__is);
            this.priority = __is.readInt();
            this.pwd = __is.readString();
            this.cmdLine = scheduler.StringSeqHelper.read(__is);
            this.env = scheduler.StringStringDictHelper.read(__is);
        },
        10, 
        false);

    scheduler.JobState = Slice.defineStruct(
        function(id, state, currentWorker, jobStatus, workerStatus)
        {
            this.id = id !== undefined ? id : new scheduler.JobId();
            this.state = state !== undefined ? state : scheduler.EnumJobState.DORMANT;
            this.currentWorker = currentWorker !== undefined ? currentWorker : null;
            this.jobStatus = jobStatus !== undefined ? jobStatus : null;
            this.workerStatus = workerStatus !== undefined ? workerStatus : null;
        },
        true,
        function(__os)
        {
            scheduler.JobId.write(__os, this.id);
            scheduler.EnumJobState.__write(__os, this.state);
            scheduler.WorkerIdSeqHelper.write(__os, this.currentWorker);
            scheduler.JobStateDescriptionSeqHelper.write(__os, this.jobStatus);
            scheduler.WorkerStateDescriptionSeqHelper.write(__os, this.workerStatus);
        },
        function(__is)
        {
            this.id = scheduler.JobId.read(__is, this.id);
            this.state = scheduler.EnumJobState.__read(__is);
            this.currentWorker = scheduler.WorkerIdSeqHelper.read(__is);
            this.jobStatus = scheduler.JobStateDescriptionSeqHelper.read(__is);
            this.workerStatus = scheduler.WorkerStateDescriptionSeqHelper.read(__is);
        },
        6, 
        false);

    scheduler.JobDTO = Slice.defineStruct(
        function(job, state)
        {
            this.job = job !== undefined ? job : new scheduler.Job();
            this.state = state !== undefined ? state : new scheduler.JobState();
        },
        false,
        function(__os)
        {
            scheduler.Job.write(__os, this.job);
            scheduler.JobState.write(__os, this.state);
        },
        function(__is)
        {
            this.job = scheduler.Job.read(__is, this.job);
            this.state = scheduler.JobState.read(__is, this.state);
        },
        16, 
        false);
    Slice.defineSequence(scheduler, "JobDTOSeqHelper", "scheduler.JobDTO", false);

    scheduler.DuplicateJob = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : null;
        },
        Ice.UserException,
        "scheduler::DuplicateJob",
        function(__os)
        {
            scheduler.JobIdSeqHelper.write(__os, this.id);
        },
        function(__is)
        {
            this.id = scheduler.JobIdSeqHelper.read(__is);
        },
        false,
        false);

    scheduler.JobCycleDetected = Slice.defineUserException(
        function(badNodes, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.badNodes = badNodes !== undefined ? badNodes : null;
        },
        Ice.UserException,
        "scheduler::JobCycleDetected",
        function(__os)
        {
            scheduler.JobIdSeqHelper.write(__os, this.badNodes);
        },
        function(__is)
        {
            this.badNodes = scheduler.JobIdSeqHelper.read(__is);
        },
        false,
        false);

    scheduler.JobNotExist = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : null;
        },
        Ice.UserException,
        "scheduler::JobNotExist",
        function(__os)
        {
            scheduler.JobIdSeqHelper.write(__os, this.id);
        },
        function(__is)
        {
            this.id = scheduler.JobIdSeqHelper.read(__is);
        },
        false,
        false);

    scheduler.JobNotStartable = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : new scheduler.JobId();
        },
        Ice.UserException,
        "scheduler::JobNotStartable",
        function(__os)
        {
            scheduler.JobId.write(__os, this.id);
        },
        function(__is)
        {
            this.id = scheduler.JobId.read(__is, this.id);
        },
        false,
        false);
    Slice.defineSequence(scheduler, "JobSeqHelper", "scheduler.Job", false);
    Slice.defineSequence(scheduler, "JobStateSeqHelper", "scheduler.JobState", false);
    Slice.defineDictionary(scheduler, "JobDict", "JobDictHelper", "Ice.StringHelper", "scheduler.Job", false, undefined, undefined, Ice.HashMap.compareEquals);

    scheduler.Batch = Slice.defineStruct(
        function(jobs)
        {
            this.jobs = jobs !== undefined ? jobs : null;
        },
        false,
        function(__os)
        {
            scheduler.JobSeqHelper.write(__os, this.jobs);
        },
        function(__is)
        {
            this.jobs = scheduler.JobSeqHelper.read(__is);
        },
        1, 
        false);

    scheduler.Image = Slice.defineStruct(
        function(jobs, currentImage)
        {
            this.jobs = jobs !== undefined ? jobs : null;
            this.currentImage = currentImage !== undefined ? currentImage : "";
        },
        false,
        function(__os)
        {
            scheduler.JobDTOSeqHelper.write(__os, this.jobs);
            __os.writeString(this.currentImage);
        },
        function(__is)
        {
            this.jobs = scheduler.JobDTOSeqHelper.read(__is);
            this.currentImage = __is.readString();
        },
        2, 
        false);

    scheduler.SchedulerServerListener = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::scheduler::SchedulerServerListener"
        ],
        -1, undefined, undefined, false);

    scheduler.SchedulerServerListenerPrx = Slice.defineProxy(Ice.ObjectPrx, scheduler.SchedulerServerListener.ice_staticId, undefined);

    Slice.defineOperations(scheduler.SchedulerServerListener, scheduler.SchedulerServerListenerPrx,
    {
        "onImage": [, , , 1, , , [[scheduler.Image]], , , , ],
        "onUpdate": [, , , 1, , , [["scheduler.JobDTOSeqHelper"]], , , , ],
        "onImageReady": [, , , 1, , , [[7], [7]], , , , ],
        "onReset": [, , , 1, , , , , , , ]
    });

    scheduler.SchedulerServer = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::scheduler::SchedulerServer"
        ],
        -1, undefined, undefined, false);

    scheduler.SchedulerServerPrx = Slice.defineProxy(Ice.ObjectPrx, scheduler.SchedulerServer.ice_staticId, undefined);

    Slice.defineOperations(scheduler.SchedulerServer, scheduler.SchedulerServerPrx,
    {
        "submitBatch": [, , , 1, , , [[scheduler.Batch]], , 
        [
            scheduler.DuplicateJob
        ], , ],
        "startJob": [, , , 1, , , [[scheduler.JobId]], , 
        [
            scheduler.JobNotExist,
            scheduler.JobNotStartable
        ], , ],
        "stopJob": [, , , 1, , , [[scheduler.JobId]], , , , ],
        "invalidateJob": [, , , 1, , , [[scheduler.JobId]], , , , ],
        "reset": [, , , 1, , , , , , , ],
        "dumpStatus": [, , , 1, , [7], , , , , ],
        "getJobs": [, , , 1, , ["scheduler.JobDTOSeqHelper"], , , , , ],
        "getStartableJob": [, , , 1, , ["scheduler.JobSeqHelper"], [[scheduler.WorkerId]], , , , ],
        "getJob": [, , , 1, , [scheduler.Job], [[scheduler.JobId]], , 
        [
            scheduler.JobNotExist
        ], , ],
        "addListener": [, , , 1, , , [["scheduler.SchedulerServerListenerPrx"]], , , , ],
        "addListenerWithIdent": [, , , 1, , , [[Ice.Identity]], , , , ],
        "onWorkerUpdate": [, , , 1, , , [[scheduler.WorkerUpdate]], , , , ],
        "imageReady": [, , , 1, , , [[7], [7]], , , , ],
        "setState": [, , , 1, , , [[scheduler.JobId], [scheduler.EnumJobState.__helper]], , , , ]
    });
    exports.scheduler = scheduler;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));
