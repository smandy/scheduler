// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `scheduler.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var Scheduler = __M.module("Scheduler");
    Slice.defineSequence(Scheduler, "StringSeqHelper", "Ice.StringHelper", false);
    Slice.defineDictionary(Scheduler, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    Scheduler.JobState = Slice.defineEnum([
        ['BLOCKED', 0], ['STARTABLE', 1], ['SCHEDULED', 2], ['STARTED', 3], ['STOPPED', 4],
        ['FAILED', 5], ['WAIVERED', 6], ['COMPLETED', 7]]);

    Scheduler.JobUpdate = Slice.defineStruct(
        function(id, pctComplete, status)
        {
            this.id = id !== undefined ? id : "";
            this.pctComplete = pctComplete !== undefined ? pctComplete : 0;
            this.status = status !== undefined ? status : "";
        },
        true,
        function(__os)
        {
            __os.writeString(this.id);
            __os.writeInt(this.pctComplete);
            __os.writeString(this.status);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.pctComplete = __is.readInt();
            this.status = __is.readString();
        },
        6, 
        false);
    Slice.defineSequence(Scheduler, "JobUpdateSeqHelper", "Scheduler.JobUpdate", false);

    Scheduler.WorkerId = Slice.defineStruct(
        function(id)
        {
            this.id = id !== undefined ? id : "";
        },
        true,
        function(__os)
        {
            __os.writeString(this.id);
        },
        function(__is)
        {
            this.id = __is.readString();
        },
        1, 
        false);

    Scheduler.JobWorkerState = Slice.defineStruct(
        function(worker, id, state)
        {
            this.worker = worker !== undefined ? worker : new Scheduler.WorkerId();
            this.id = id !== undefined ? id : "";
            this.state = state !== undefined ? state : Scheduler.JobState.BLOCKED;
        },
        true,
        function(__os)
        {
            Scheduler.WorkerId.write(__os, this.worker);
            __os.writeString(this.id);
            Scheduler.JobState.__write(__os, this.state);
        },
        function(__is)
        {
            this.worker = Scheduler.WorkerId.read(__is, this.worker);
            this.id = __is.readString();
            this.state = Scheduler.JobState.__read(__is);
        },
        3, 
        false);
    Slice.defineSequence(Scheduler, "JobWorkerStateSeqHelper", "Scheduler.JobWorkerState", false);

    Scheduler.Job = Slice.defineStruct(
        function(id, dependencies, state, priority, pwd, cmdLine, env, batchId)
        {
            this.id = id !== undefined ? id : "";
            this.dependencies = dependencies !== undefined ? dependencies : null;
            this.state = state !== undefined ? state : Scheduler.JobState.STARTABLE;
            this.priority = priority !== undefined ? priority : 0;
            this.pwd = pwd !== undefined ? pwd : "";
            this.cmdLine = cmdLine !== undefined ? cmdLine : null;
            this.env = env !== undefined ? env : null;
            this.batchId = batchId !== undefined ? batchId : "";
        },
        false,
        function(__os)
        {
            __os.writeString(this.id);
            Scheduler.StringSeqHelper.write(__os, this.dependencies);
            Scheduler.JobState.__write(__os, this.state);
            __os.writeInt(this.priority);
            __os.writeString(this.pwd);
            Scheduler.StringSeqHelper.write(__os, this.cmdLine);
            Scheduler.StringStringDictHelper.write(__os, this.env);
            __os.writeString(this.batchId);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.dependencies = Scheduler.StringSeqHelper.read(__is);
            this.state = Scheduler.JobState.__read(__is);
            this.priority = __is.readInt();
            this.pwd = __is.readString();
            this.cmdLine = Scheduler.StringSeqHelper.read(__is);
            this.env = Scheduler.StringStringDictHelper.read(__is);
            this.batchId = __is.readString();
        },
        11, 
        false);
    Slice.defineSequence(Scheduler, "JobSeqHelper", "Scheduler.Job", false);
    Slice.defineDictionary(Scheduler, "JobDict", "JobDictHelper", "Ice.StringHelper", "Scheduler.Job", false, undefined, undefined, Ice.HashMap.compareEquals);

    Scheduler.Batch = Slice.defineStruct(
        function(jobs)
        {
            this.jobs = jobs !== undefined ? jobs : null;
        },
        false,
        function(__os)
        {
            Scheduler.JobSeqHelper.write(__os, this.jobs);
        },
        function(__is)
        {
            this.jobs = Scheduler.JobSeqHelper.read(__is);
        },
        1, 
        false);

    Scheduler.Image = Slice.defineStruct(
        function(jobs, currentImage)
        {
            this.jobs = jobs !== undefined ? jobs : null;
            this.currentImage = currentImage !== undefined ? currentImage : "";
        },
        false,
        function(__os)
        {
            Scheduler.JobSeqHelper.write(__os, this.jobs);
            __os.writeString(this.currentImage);
        },
        function(__is)
        {
            this.jobs = Scheduler.JobSeqHelper.read(__is);
            this.currentImage = __is.readString();
        },
        2, 
        false);

    Scheduler.SchedulerServerListener = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Scheduler::SchedulerServerListener",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Scheduler.SchedulerServerListenerPrx = Slice.defineProxy(Ice.ObjectPrx, Scheduler.SchedulerServerListener.ice_staticId, undefined);

    Slice.defineOperations(Scheduler.SchedulerServerListener, Scheduler.SchedulerServerListenerPrx,
    {
        "onImage": [, , , 1, , , [[Scheduler.Image]], , , , ],
        "onUpdate": [, , , 1, , , [["Scheduler.JobSeqHelper"]], , , , ],
        "onImageReady": [, , , 1, , , [[7]], , , , ],
        "onReset": [, , , 1, , , , , , , ]
    });

    Scheduler.JobNotFound = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : "";
        },
        Ice.UserException,
        "Scheduler::JobNotFound",
        function(__os)
        {
            __os.writeString(this.id);
        },
        function(__is)
        {
            this.id = __is.readString();
        },
        false,
        false);

    Scheduler.SchedulerServer = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Scheduler::SchedulerServer",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Scheduler.SchedulerServerPrx = Slice.defineProxy(Ice.ObjectPrx, Scheduler.SchedulerServer.ice_staticId, undefined);

    Slice.defineOperations(Scheduler.SchedulerServer, Scheduler.SchedulerServerPrx,
    {
        "submitBatch": [, , , 1, , , [[Scheduler.Batch]], , , , ],
        "startJob": [, , , 1, , , [[7]], , , , ],
        "stopJob": [, , , 1, , , [[7]], , , , ],
        "invalidate": [, , , 1, , , [[7]], , , , ],
        "reset": [, , , 1, , , , , , , ],
        "dumpStatus": [, , , 1, , [7], , , , , ],
        "getJobs": [, , , 1, , ["Scheduler.JobSeqHelper"], , , , , ],
        "getStartableJob": [, , , 1, , ["Scheduler.JobSeqHelper"], [[Scheduler.WorkerId]], , , , ],
        "getJob": [, , , 1, , [Scheduler.Job], [[7]], , 
        [
            Scheduler.JobNotFound
        ], , ],
        "addListener": [, , , 1, , , [["Scheduler.SchedulerServerListenerPrx"]], , , , ],
        "addListenerWithIdent": [, , , 1, , , [[Ice.Identity]], , , , ],
        "onWorkerStates": [, , , 1, , , [["Scheduler.JobWorkerStateSeqHelper"]], , , , ],
        "imageReady": [, , , 1, , , [[7]], , , , ]
    });
    exports.Scheduler = Scheduler;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
